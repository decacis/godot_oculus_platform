{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Godot Oculus Platform Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is the documentation site for the Godot Oculus Platform, an implementation of the Oculus Platform SDK for the Godot Engine.</p> <p>While you can use this plugin in the editor to get code suggestions, it only works with the Meta Quest (Android), not PCVR (Rift) at the moment. If you plan to develop for both the Quest and Rift, you should add a platform check and only use this plugin when the platform is Android.</p> <p>Please note that both the documentation and the plugin itself are in development and may be incomplete.</p> <p>Quick links:</p> <ul> <li>Downloads</li> <li>Oculus Platform documentation</li> </ul> <p>If you find an issue, please report it on the GitHub issues page.</p>"},{"location":"build/","title":"Build","text":"<p>If you choose to build the plugin yourself, first clone the repository.</p> <p>After that, initialize the submodules by running: <pre><code>git submodule update --init --recursive\n</code></pre></p> <p>Then run: <pre><code>scons platform=PLATFORM_HERE target=TARGET_HERE\n</code></pre></p> <p>The required compilation parameters are:</p> <ul> <li>platform: <code>windows</code>, <code>macos</code>, <code>linux</code> or <code>android</code></li> <li>target: <code>template_debug</code> or <code>template_release</code></li> </ul> <p>For android, you also have to add: <code>arch=arm64v8</code> and you only need to generate the <code>template_release</code> since <code>template_debug</code> is not used.</p> <p>You can optionally add <code>-j&lt;cores&gt;</code> to use a set number of cores to build this asset. For example: <code>-j4</code></p> <p>The files will be placed in: <code>demo/addons/godot_oculus_platform/bin</code></p>"},{"location":"build/#android-plugin","title":"Android Plugin","text":"<p>This plugin also requires an Android plugin to work with the Quest platform. To build the android plugin you have to navigate to <code>tools/godotoculusplatform-android-plugin</code> and run:</p> <p>On windows: <pre><code>.\\gradlew.bat build\n</code></pre></p> <p>On linux: <pre><code>./gradlew build\n</code></pre></p> <p>Finally, you have to copy the files into place:</p> Source Destination <code>demo/addons/godot_oculus_platform</code> Your projet's addon folder <code>tools/godotoculusplatform-android-plugin/godotoculusplatform-android-plugin/build/outputs/aar/godotoculusplatform-android-plugin-release.aar</code> <code>addons/godot_oculus_platform/android_plugin</code> <code>tools/godotoculusplatform-android-plugin/godotoculusplatform-android-plugin/build/outputs/aar/godotoculusplatform-android-plugin-debug.aar</code> <code>addons/godot_oculus_platform/android_plugin</code> <p>Note</p> <p>Make sure to enable the <code>Godot Oculus Platform</code> plugin in your Project Settings.</p>"},{"location":"download/","title":"Download","text":"<p>The interactive list bellow will help you find all of the precompiled releases from a combination of Godot and Oculus Platform SDK versions:</p>      Godot version  with Oculus Platform SDK version  <p>Note</p> <p>Make sure to enable the <code>Godot Oculus Platform</code> plugin in your Project Settings.</p> <p>Also, most of the methods will require you to enable the <code>INTERNET</code> permission in your export settings/add it to your AndroidManifest.xml</p> <p>You can find all the releases in the GitHub releases page.</p> <p>In-development precompiled versions can be found in the GitHub actions page.</p>"},{"location":"examples/","title":"Examples","text":"<p>Here are some examples of using this asset. For more details make sure to check the documentation for each function you want to use.</p>"},{"location":"examples/#entitlement-check","title":"Entitlement check","text":"<p>An entitlement check allows you to quickly check if the user that launched the app actually is entitled to it.</p> <pre><code># Initializing android platform with the APP_ID as a parameter\nGDOculusPlatform.initialize_android_async(\"314159265358979\")\\\n.then(func(_initialization_resp):\n    print(\"Oculus Platform initialized!\")\n\n    # Is the user entitled to this app?\n    GDOculusPlatform.get_is_viewer_entitled()\\\n    .then(func(_is_viewer_entitled_resp):\n        print(\"User is entitled!\")\n\n    )\\\n    .error(func(is_viewer_entitled_err):\n        print(\"User not entitled/error! \", is_viewer_entitled_err)\n    )\n\n)\\\n.error(func(initialization_err):\n    print(\"Oculus Platform initialization error: \", initialization_err)\n)\n</code></pre>"},{"location":"examples/#getting-logged-in-user-information","title":"Getting logged in user information","text":"<p>Since the promises (<code>then</code> and <code>error</code> functions) take a <code>Callable</code> you can do something like this:</p> <pre><code>GDOculusPlatform.initialize_android_async(\"6324217457624418\")\\\n.then(func(_initialization_resp):\n    print(\"Oculus Platform initialized\")\n\n    GDOculusPlatform.get_logged_in_user()\\\n    .then(_process_logged_in_user_response)\n\n)\\\n.error(func(initialization_err):\n    print(\"Oculus Platform initialization error: \", initialization_err)\n)\n\nfunc _process_logged_in_user_response(resp : Dictionary):\n    print(\"LOGGED IN USER INFO:\")\n    print(\"--------------------\")\n\n    print(\"ID: \", resp.id)\n    print(\"OCULUS ID: \", resp.oculus_id)\n    print(\"DISPLAY NAME: \", resp.display_name)\n    print(\"IMAGE URL: \", resp.image_url)\n    print(\"SMALL IMAGE URL: \", resp.small_image_url)\n</code></pre> <p>You may have noticed that we didn't add an <code>error</code> function call to the <code>get_logged_in_user()</code> function. Both the <code>then</code> and <code>error</code> functions are optional, and you can skip them if you don't care about their result.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>There are several steps to follow before using this asset. We assume you already have an app/game even if you have not published to the AppLab or the Quest Store.</p>"},{"location":"getting-started/#create-a-release-version","title":"Create a release version","text":"<p>You have to create release version of your app (i.e. with Deploy With Debug disabled) to upload it to AppLab or the Quest Store. This app doesn't have to be the final version of your app, but it should be signed with a release keystore.</p> <p>The Exporting for Google Play Store section on the Godot documentation explains this process (it's the same for the Quest Store).</p>"},{"location":"getting-started/#creating-an-app-page","title":"Creating an App Page","text":"<p>First you have to create a page for your app. You can read more about this process in the official Oculus Platform documentation, but essentially you have to:</p> <ul> <li>Log on to the Developer Dashboard.</li> <li>Click Create New App.</li> <li>Enter the name of your app. The name is permanent and cannot be changed.</li> <li>From Platform, select Meta Quest (App Lab).</li> </ul>"},{"location":"getting-started/#upload-your-first-build","title":"Upload your first build","text":"<p>You have to upload a \"first version\" of your app, even if it's not complete or even beginning development. This allows oculus to associate the app's package id (com.example.app for example) to the App Page you created before.</p> <p>We recommend using the Meta Quest Developer Hub (MQDH) to manage your apps, release channels and versions, though there are other ways of uploading a build.</p> <p>Assuming you are using the MQDH, you have to:</p> <ul> <li>Go to \"App Distribution\".</li> <li>Select your app.</li> <li>Click the upload button on the desired release channel. We recommend you upload your first build to the \"ALPHA\" release channel.</li> <li>Select the APK of your app.</li> <li>Finish the upload process.</li> </ul>"},{"location":"getting-started/#request-data-use-checkup-permissions","title":"Request Data Use Checkup permissions","text":"<p>Depending on what functions you use, you have to request different Data Use Checkup permissions. You can read more about this process here.</p> <p>As long as you are in development (haven't published your app yet), you can request all the permissions you need and they will be approved automatically to ease development. Once you want to publish your app, you will have to re-request these permissions.</p>"},{"location":"getting-started/#using-this-asset","title":"Using this asset","text":"<p>First, download this asset and place the addon inside your addons folder and the android plugin inside your android plugins folder. You should be able to just drag and drop the contents of the ZIP file inside your project. Remember to enable the \"Godot Oculus Platform\" plugin in your project settings.</p> <p>Also, most of the methods will require you to enable the <code>INTERNET</code> permission in your export settings/add it to your AndroidManifest.xml</p> <p>You can take a look at the examples to get an idea of how to interact with the Oculus Platform.</p> <p>A concept we use is the use of promises or more specifically <code>GDOculusPlatformPromise</code>s. These promises basically help you perform actions in an asynchronous manner. Take a look at the following example:</p> <p><pre><code>print(\"Godot\")\n\nGDOculusPlatform.initialize_android_async(\"314159265358979\")\\\n.then(func(_initialization_resp):\n    print(\"Oculus\")\n)\n\nprint(\"Platform\")\n</code></pre> This will print:</p> <pre><code>Godot\nPlatform\nOculus\n</code></pre> <p>Since almost all functions in this platform are asynchronous, they don't block code execution allowing you to do other stuff while you wait for a response from the Oculus Platform.</p>"},{"location":"functions/abuse-report/","title":"Functions - Abuse Report","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>User Reporting FAQs</li> <li>https://developer.oculus.com/resources/reporting-service/</li> <li>https://developer.oculus.com/resources/reporting-plugin</li> </ul>"},{"location":"functions/abuse-report/#signals","title":"Signals","text":""},{"location":"functions/abuse-report/#abuse_report_form_requested","title":"abuse_report_form_requested","text":"<p>About</p> <p>This signal will be emitted when the user presses the abuse report button. You then have to let the Oculus Platform know if you handled the notification or not. See abuse_report_request_handled for details on how to handle this request.</p>"},{"location":"functions/abuse-report/#functions","title":"Functions","text":""},{"location":"functions/abuse-report/#abuse_report_request_handled","title":"abuse_report_request_handled","text":"<p>abuse_report_request_handled(report_request_response : <code>ReportRequestResponse</code>)</p> <p>Informs the Oculus Platform about whether we handled the notification or not. You want to respond with <code>handled</code> if you showed an in-game form or UI to handle the user report request.</p> <p>On the other hand, if the player is in the tutorial for example, and they are not interacting with other users, you can respond with <code>unhandled</code> and ideally let the user know that they can't create an abuse report in that part of your app.</p> <p>NOTE: if you use the Reporting Service provided by Meta, a UI will be shown automatically. I don't really know if you have to set the request as handled in that case, but it doesn't hurt informing that you handled the request anyway.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>true</code> <code>bool</code> if the request was fulfilled. The promise will error if the request couldn't be completed.</p> <p>Enums:</p> <p>ReportRequestResponse</p> Name Value Description REPORT_REQUEST_HANDLED 1 The app showed a form/UI to handle the abuse report. REPORT_REQUEST_UNHANDLED 2 The app decided not to show a form/UI and informed the user why. Example <pre><code>GDOculusPlatform.abouse_report_form_requested.connect(_handle_abuse_report_req)\n\nfunc _handle_abuse_report_req():\n\n    # SHOW ABUSE REPORT UI\n\n    # Let platform know that we handled the request\n    GDOculusPlatform.abuse_report_request_handled(GDOculusPlatform.REPORT_REQUEST_HANDLED)\\\n    .error(func(request_error):\n        print(\"Unable to send handled response: \", request_error)\n    )\n</code></pre>"},{"location":"functions/achievements/","title":"Functions - Achievements","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-achievements/</li> </ul>"},{"location":"functions/achievements/#functions","title":"Functions","text":""},{"location":"functions/achievements/#achievements_add_count","title":"achievements_add_count","text":"<p>achievements_add_count(achievement_name : <code>String</code>, count : <code>int</code>)</p> <p>Adds <code>count</code> to the achievement with the given name. The achievement must be of type COUNT.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"name\": \"my_count_achievement\",\n    \"just_unlocked\": false\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_add_count(\"my_count_achievement\", 5)\\\n.then(func(add_count_resp : Dictionary):\n    if add_count_resp.just_unlocked:\n        print(\"Achievement unlocked!\")\n)\\\n.error(func(add_count_err):\n    print(\"Unable to update achievement: \", add_count_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_add_fields","title":"achievements_add_fields","text":"<p>achievements_add_fields(achievement_name : <code>String</code>, fields : <code>String</code>)</p> <p>Unlocks fields of an achievement of type BITFIELD. The <code>fields</code> argument must be a <code>String</code> containing either \"0\" or \"1\" characters. Every \"1\" will unlock the field in the corresponding position. For example, if the bitfield is <code>10011</code> and you call this function with <code>fields = 00110</code>, the result will be <code>10111</code>.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"name\": \"my_bitfield_achievement\",\n    \"just_unlocked\": true\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_add_fields(\"my_bitfield_achievement\", \"0011\")\\\n.then(func(add_fields_resp : Dictionary):\n    if add_fields_resp.just_unlocked:\n        print(\"Achievement unlocked!\")\n)\\\n.error(func(add_fields_err):\n    print(\"Unable to update achievement: \", add_fields_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_unlock","title":"achievements_unlock","text":"<p>achievements_unlock(achievement_name : <code>String</code>)</p> <p>Unlocks the achievement with the given <code>achievement_name</code>. The achievement can be of any type.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"name\": \"my_simple_achievement\",\n    \"just_unlocked\": true\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_unlock(\"my_simple_achievement\")\\\n.then(func(unlock_achievement_resp : Dictionary):\n    if unlock_achievement_resp.just_unlocked:\n        print(\"Achievement unlocked!\")\n)\\\n.error(func(unlock_achievement_err):\n    print(\"Unable to update achievement: \", unlock_achievement_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_all_definitions","title":"achievements_get_all_definitions","text":"<p>achievements_get_all_definitions()</p> <p>Requests all achievement definitions of this app.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>next_page_url</code>. Data will contain information about all the achievements if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"name\": \"my_achievement\",\n            \"bitfield_length\": 0,\n            \"target\": 0,\n            \"type\": \"SIMPLE\"\n        },\n        {\n            \"name\": \"my_count_achievement\",\n            \"bitfield_length\": 0,\n            \"target\": 64,\n            \"type\": \"COUNT\"\n        },\n        {\n            \"name\": \"my_bitfield_achievement\",\n            \"bitfield_length\": 8,\n            \"target\": 5,\n            \"type\": \"BITFIELD\"\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> <p>Note</p> <p><code>type</code> can be <code>SIMPLE</code>, <code>COUNT</code> or <code>BITFIELD</code>.</p> Example <pre><code>GDOculusPlatform.achievements_get_all_definitions()\\\n.then(func(achievs : Dictionary):\n    if not achievs.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for achievement in achievs.data:\n        print(\"Achievement: \", achievement.name)\n)\\\n.error(func(achievements_err):\n    print(\"Unable to get achievement definitions: \", achievements_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_all_progress","title":"achievements_get_all_progress","text":"<p>achievements_get_all_progress()</p> <p>Requests all the progress of the achievements of this app.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>next_page_url</code>. The <code>data</code> key will contain information about the user's progress in all the achievements if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"name\": \"my_achievement\",\n            \"current_count\": 0,\n            \"current_bitfield\": \"\",\n            \"is_unlocked\": true,\n            \"unlock_time\": 1683990416\n        },\n        {\n            \"name\": \"my_count_achievement\",\n            \"current_count\": 12,\n            \"current_bitfield\": \"\",\n            \"is_unlocked\": false,\n            \"unlock_time\": 0\n        },\n        {\n            \"name\": \"my_bitfield_achievement\",\n            \"current_count\": 0,\n            \"current_bitfield\": \"10011\",\n            \"is_unlocked\": false,\n            \"unlock_time\": 0\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> <p>Note</p> <p><code>unlock_time</code> is a UNIX timestamp (in seconds).</p> <p>The response only includes achievements where the user is \"participating\", meaning that if for example you have an achievement of type <code>COUNT</code> and the user has not made progress towards this achievement yet, it will not be included (instead of just showing 0).</p> Example <pre><code>GDOculusPlatform.achievements_get_all_progress()\\\n.then(func(achievements_prog : Dictionary):\n    if not achievements_prog.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for achievement_progress in achievements_prog.data:\n        print(\"Achievement name: \", achievement_progress.name)\n        print(\"Unlocked? \", achievement_progress.is_unlocked)\n)\\\n.error(func(achievements_progress_err):\n    print(\"Unable to get achievements progress: \", achievements_progress_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_definitions_by_name","title":"achievements_get_definitions_by_name","text":"<p>achievements_get_definitions_by_name(achievement_names : <code>Array</code>)</p> <p>Requests achievement definitions by name of this app. The <code>achievement_names</code> argument must contain <code>String</code>s only.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>get_next_url</code>. The <code>data</code> key will contain information about the achievements requested if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Note</p> <p>Take a look at the example response and the note from the achievements_get_all_definitions function to know more details about the possible response from this function.</p> Example <pre><code>var achievements_n : Array = [\"my_achievement\", \"my_bitfield_achievement\"]\n\nGDOculusPlatform.achievements_get_definitions_by_name(achievements_n)\\\n.then(func(achievement_defs : Dictionary):\n\n    for achievement_def in achievement_defs.data:\n        print(\"Achievement name: \", achievement_def.name)\n)\\\n.error(func(achievement_defs_err):\n    print(\"Unable to get achievement definitions by name: \", achievement_defs_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_progress_by_name","title":"achievements_get_progress_by_name","text":"<p>achievements_get_progress_by_name(achievement_names : <code>Array</code>)</p> <p>Requests progress information of achievements by their name. The <code>achievement_names</code> argument must contain <code>String</code>s only.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>next_page_url</code>. The <code>data</code> key will contain information about progress of the achievements requested if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Note</p> <p>Take a look at the example response and the note from the achievements_get_all_definitions function to know more details about the possible response from this function.</p> Example <pre><code>var achievements : Array = [\"my_count_achievement\"]\n\nGDOculusPlatform.achievements_get_progress_by_name(achievements)\\\n.then(func(achievements_prog : Dictionary):\n\n    if not achievements_prog.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for achievement_progress in achievements_prog.data:\n        print(\"Achievement name: \", achievement_progress.name)\n        print(\"Unlock_time: \", achievement_progress.unlock_time)\n)\\\n.error(func(achievements_progress_err):\n    print(\"Unable to get achievements progress: \", achievements_progress_err)\n)\n</code></pre>"},{"location":"functions/application/","title":"Functions - Application","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-deep-linking/</li> <li>https://developer.oculus.com/documentation/native/ps-events/</li> </ul>"},{"location":"functions/application/#signals","title":"Signals","text":""},{"location":"functions/application/#app_launch_intent_changed","title":"app_launch_intent_changed","text":"<p>About</p> <p>This signal will be emitted when the launch intent changes. For example, if another app launched this app, and this app is already loaded in the background.</p> <p>The signal will contain a <code>String</code> with the type of the intent.</p> <p>You should call application_get_launch_details to get more information about the launch.</p>"},{"location":"functions/application/#functions","title":"Functions","text":""},{"location":"functions/application/#application_get_version","title":"application_get_version","text":"<p>application_get_version()</p> <p>Returns information about the current application.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the current app version if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"current_code\": 5,\n    \"latest_code\": 6,\n    \"current_name\": \"v5-alpha\",\n    \"latest_name\": \"v6-beta\",\n    \"release_date\": -1,\n    \"update_size\": \"-1\"\n}\n</code></pre></p> <ul> <li><code>release_date</code> is in seconds (epoch)</li> <li><code>update_size</code> is in bytes</li> </ul> Example <pre><code>GDOculusPlatform.application_get_version()\\\n.then(func(app_version : Dictionary):\n    if app_version.current_code != app_version.latest_code:\n        print(\"There is a new version of this app, please update!\")\n)\\\n.error(func(app_version_err):\n    print(\"Unable to retrieve app version info: \", app_version_err)\n)\n</code></pre>"},{"location":"functions/application/#application_launch_other_app","title":"application_launch_other_app","text":"<p>application_launch_other_app(app_id : <code>String</code>, deeplink_options : <code>Dictionary</code>)</p> <p>Sends a request to the Oculus Platform to launch another app. The <code>app_id</code> argument is the ID of the other app you wish to launch. The <code>deeplink_options</code> argument is optional.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>String</code> with information about the request if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example of <code>deeplink_options</code>: <pre><code>{\n    \"deeplink_message\": \"FROM_APP1_TO_APP2_LOBBY\",\n    \"destination_api_name\": \"MY_COOL_DESTINATION\",\n    \"lobby_session_id\": \"51254821626844\",\n    \"match_session_id\": \"92848281510484\"\n}\n</code></pre></p> <p>If you decide to include <code>deeplink_options</code>, the only required field is <code>deeplink_message</code>. The other fields can be used to interact with other APIs, but they are not required.</p> Example <pre><code>var deeplink_options : Dictionary = {\n    \"deeplink_message\": \"GO_TO_MAIN_LOBBY\"\n}\n\nGDOculusPlatform.application_launch_other_app(\"50125468232421\", deeplink_options)\\\n.then(func(launch_result : String):\n    print(\"Launch result: \", launch_result)\n)\\\n.error(func(launch_err):\n    print(\"Unable to launch other app: \", launch_err)\n)\n</code></pre>"},{"location":"functions/application/#application_get_launch_details","title":"application_get_launch_details","text":"<p>application_get_launch_details()</p> <p>Used to retrieve information about the launch. Can be used to deep link applications and know if another app requested the launch, among other things.</p> <p>Returns: A <code>Dictionary</code> with information about the app's launch.</p> <p>Example response: <pre><code>{\n    \"deeplink_message\": \"GO_TO_MAIN_LOBBY\",\n    \"destination_api_name\": \"\",\n    \"lobby_session_id\": \"\",\n    \"match_session_id\": \"\",\n    \"tracking_id\": \"574371645284520\",\n    \"launch_source\": \"events\",\n    \"launch_type\": \"DEEPLINK\",\n    \"users\": {\n        \"data\": [\n            {\n                \"id\": \"2384626433832795\",\n                \"oculus_id\": \"some_id\",\n                \"display_name\": \"Steve\",\n                \"image_url\": \"https://example.org/some-image.png\",\n                \"small_image_url\": \"\",\n                \"presence\": {\n                    \"presence_status\": \"ONLINE\",\n                    \"presence_deeplink_message\": \"\",\n                    \"presence_destination_api_name\": \"\",\n                    \"presence_lobby_session_id\": \"\",\n                    \"presence_match_session_id\": \"\",\n                }\n            }\n        ],\n        \"next_page_url\": \"\"\n    }\n}\n</code></pre></p> <ul> <li><code>launch_type</code> can be: <code>DEEPLINK</code>, <code>COORDINATED</code>, <code>INVITE</code>, <code>NORMAL</code> or <code>UNKNOWN</code>.</li> <li><code>launch_source</code> can be used to distinguish where the deeplink came from. For example, a <code>DEEPLINK</code> launch type could be coming from events or rich presence.</li> <li><code>users</code> is a <code>Dictionary</code> that could be populated with other users the current user may want to be with.</li> </ul> <p>More info about next_page_url.</p> Example <pre><code>var launch_details : Dictionary = GDOculusPlatform.application_get_launch_details()\n\nif launch_details.launch_type == \"DEEPLINK\":\n\n    match launch_details.deeplink_message:\n        \"GO_TO_MAIN_LOBBY\":\n            _handle_dl_main_lobby()\n        \"GO_TO_STORE\":\n            _handle_dl_store()\n</code></pre>"},{"location":"functions/application/#application_start_app_download","title":"application_start_app_download","text":"<p>application_start_app_download()</p> <p>Starts downloading the latest app update (if there is one).</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request once the operation is finished. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"install_result\": \"SUCCESS\",\n    \"timestamp\": 1724284356\n}\n</code></pre></p> <ul> <li><code>install_result</code> can be: <code>UNKNOWN</code>, <code>LOW_STORAGE</code>, <code>NETWORK_ERROR</code>, <code>DUPLICATE_REQUEST</code>, <code>INSTALLER_ERROR</code>, <code>USER_CANCELLED</code>, <code>AUTHORIZATION_ERROR</code> or <code>SUCCESS</code>.</li> </ul> <p>Notes</p> <p>According to the docs, this method will return until a problem occurs or the app finishes downloading.</p> Example <pre><code>GDOculusPlatform.application_start_app_download()\\\n.then(func(result : Dictionary):\n     if result.install_result == \"SUCCESS\":\n        GDOculusPlatform.application_install_app_update_and_relaunch()\n)\\\n.error(func(app_update_err):\n    print(\"Failed to start downloading app update: \", app_update_err)\n)\n</code></pre>"},{"location":"functions/application/#application_check_app_download_progress","title":"application_check_app_download_progress","text":"<p>application_check_app_download_progress()</p> <p>Requests the download progress of the latest app update (if there is one).</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the current app update download. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"total_bytes\": 2048,\n    \"downloaded_bytes\": 1024,\n    \"status\": \"DOWNLOADING\"\n}\n</code></pre></p> <ul> <li><code>status</code> can be: <code>UNKNOWN</code>, <code>ENTITLED</code>, <code>DOWNLOAD_QUEUED</code>, <code>DOWNLOADING</code>, <code>INSTALL_QUEUED</code>, <code>INSTALLING</code>, <code>INSTALLED</code> or <code>UNINSTALLED</code>.</li> </ul> Example <pre><code>GDOculusPlatform.application_check_app_download_progress()\\\n.then(func(download_info : Dictionary):\n     print(\"Download status: \", download_info.status)\n)\\\n.error(func(download_info_err):\n    print(\"Failed to get the donwload progress: \", download_info_err)\n)\n</code></pre>"},{"location":"functions/application/#application_cancel_app_download","title":"application_cancel_app_download","text":"<p>application_cancel_app_download()</p> <p>Cancels the current download of the latest app update (if there is one).</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request once the operation is finished. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"install_result\": \"SUCCESS\",\n    \"timestamp\": 1724284356\n}\n</code></pre></p> <ul> <li><code>install_result</code> can be: <code>UNKNOWN</code>, <code>LOW_STORAGE</code>, <code>NETWORK_ERROR</code>, <code>DUPLICATE_REQUEST</code>, <code>INSTALLER_ERROR</code>, <code>USER_CANCELLED</code>, <code>AUTHORIZATION_ERROR</code> or <code>SUCCESS</code>.</li> </ul> Example <pre><code>GDOculusPlatform.application_cancel_app_download()\\\n.then(func(result : Dictionary):\n     print(\"Cancelled download of app update at: \", result.timestamp)\n)\\\n.error(func(app_update_cancel_err):\n    print(\"Failed to cancel downloading app update: \", app_update_cancel_err)\n)\n</code></pre>"},{"location":"functions/application/#application_install_app_update_and_relaunch","title":"application_install_app_update_and_relaunch","text":"<p>application_install_app_update_and_relaunch(deeplink_options : <code>Dictionary</code>)</p> <p>Installs the latest app update (if there is one) and launches the application again once the install finishes. The <code>deeplink_options</code> argument is optional.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"install_result\": \"LOW_STORAGE\",\n    \"timestamp\": 1724284356\n}\n</code></pre></p> <ul> <li><code>install_result</code> can be: <code>UNKNOWN</code>, <code>LOW_STORAGE</code>, <code>NETWORK_ERROR</code>, <code>DUPLICATE_REQUEST</code>, <code>INSTALLER_ERROR</code>, <code>USER_CANCELLED</code>, <code>AUTHORIZATION_ERROR</code> or <code>SUCCESS</code>.</li> </ul> <p>Example of <code>deeplink_options</code>: <pre><code>{\n    \"deeplink_message\": \"GO_TO_LOBBY\",\n    \"destination_api_name\": \"MY_SUPER_DESTINATION\",\n    \"lobby_session_id\": \"51254821626844\",\n    \"match_session_id\": \"92848281510484\"\n}\n</code></pre></p> <p>If you decide to include <code>deeplink_options</code>, the only required field is <code>deeplink_message</code>. The other fields can be used to interact with other APIs, but they are not required.</p> Example <pre><code>GDOculusPlatform.application_install_app_update_and_relaunch()\\\n.then(func(result : Dictionary):\n    if result.install_result != \"SUCCESS\":\n        print(\"[ERROR] %s\" % result.install_result)\n)\\\n.error(func(app_update_install_err):\n    print(\"Failed to install latest app update: \", app_update_install_err)\n)\n</code></pre>"},{"location":"functions/asset-files/","title":"Functions - Asset Files","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/resources/add-ons/</li> <li>https://developer.oculus.com/documentation/native/ps-iap/</li> </ul>"},{"location":"functions/asset-files/#signals","title":"Signals","text":""},{"location":"functions/asset-files/#assetfile_download_update","title":"assetfile_download_update","text":"<p>About</p> <p>This signal will be emitted periodically to track the progress of the download. Here's an example of the payload of the signal:</p> <p><pre><code>{\n    \"id\": \"821548111514\",\n    \"completed\": false,\n    \"total_bytes\": 2048,\n    \"transferred_bytes\": 1024\n}\n</code></pre> Note that the first time the <code>assetfile_download_update</code> <code>Signal</code> gets emitted, the values may be <code>0</code> for <code>total_bytes</code> and <code>transferred_bytes</code>. You should wait/check until the <code>Signal</code> has a payload with <code>total_bytes</code> more than <code>0</code> if you intend to use this value to show a progress bar, for example.</p>"},{"location":"functions/asset-files/#assetfile_download_finished","title":"assetfile_download_finished","text":"<p>About</p> <p>This signal will be emitted once the asset file has finished downloading. It will have a <code>String</code> with the asset file ID as a payload. Note that the <code>assetfile_download_update</code> <code>Signal</code> will be emitted one last time as well with <code>completed</code> as <code>true</code>.</p>"},{"location":"functions/asset-files/#functions","title":"Functions","text":""},{"location":"functions/asset-files/#assetfile_get_list","title":"assetfile_get_list","text":"<p>assetfile_get_list()</p> <p>Requests a list of asset files associated with this app.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain an <code>Array</code> of <code>Dictionaries</code> with information about each asset file. The promise will error if the request couldn't be fulfilled.</p> <p>If the asset file is of type <code>language_pack</code>, the \"tag\" key is supposed to conform to the BCP47 standard, but in reality it replaces the \"-\" with \"_\" so what should be <code>en-US</code> ends up as <code>en_US</code>.</p> <p>Example response: <pre><code>[\n    {\n        \"id\": \"151548188744\",\n        \"type\": \"default\",\n        \"download_status\": \"installed\",\n        \"file_path\": \"/sdcard/path/to/asset.pck\",\n        \"iap_status\": \"entitled\",\n        \"metadata\": \"custom_metadata_set_by_you\"\n    },\n    {\n        \"id\": \"821548111514\",\n        \"type\": \"language_pack\",\n        \"download_status\": \"available\",\n        \"file_path\": \"/sdcard/path/to/asset.po\",\n        \"iap_status\": \"free\",\n        \"metadata\": \"\",\n        \"language_info\": {\n            \"english_name\": \"Spanish\",\n            \"native_name\": \"Espa\u00f1ol\",\n            \"tag\": \"es_ES\"\n        }\n    }\n]\n</code></pre></p> <p>Asset file types:</p> Type Description default The asset file is used to download extra content post-installation. store The asset file should be shown in the Store. language_pack The asset file is used to manage different languages and translation data, which can be downloaded post-installation. <p>Asset file download status:</p> Type Description installed The asset file is installed available The asset file can be downloaded in-progress The asset file is being downloaded or installed <p>Asset file IAP status:</p> Type Description free The asset file is free entitled The user is entitled to the asset file not-entitled The user is not entitled to the asset file Example <pre><code>GDOculusPlatform.assetfile_get_list()\\\n.then(func(asset_files : Array):\n    for asset_file in asset_files:\n\n        if asset_file.iap_status == \"entitled\"\\\n        and asset_file.download_status == \"available\":\n            print(\"This asset file is available for download\")\n\n        elif asset_file.download_status == \"installed\"\\\n        and asset_file.iap_status == \"not-entitled\":\n            print(\"User has an asset installed that they shouldn't have. Maybe they refunded the item?\")\n)\\\n.error(func(asset_files_err):\n    print(\"Unable to retrieve list of assets: \", asset_files_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_status_by_id","title":"assetfile_status_by_id","text":"<p>assetfile_status_by_id(asset_id : <code>String</code>)</p> <p>Requests information about a single asset file by its ID.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the asset file. The promise will error if the request couldn't be fulfilled.</p> <p>See the example response from assetfile_get_list to get an idea of the response. The only difference is that this function returns a single <code>Dictionary</code> and <code>assetfile_get_list</code> returns an <code>Array</code> of <code>Dictionaries</code>.</p> Example <pre><code>GDOculusPlatform.assetfile_status_by_id(\"151548188744\")\\\n.then(func(asset_file : Dictionary):\n\n    if asset_file.download_status == \"installed\"\\\n    and asset_file.iap_status == \"not-entitled\":\n        print(\"User should not have this asset!\")\n)\\\n.error(func(asset_file_err):\n    print(\"Unable to retrieve asset file: \", asset_file_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_status_by_name","title":"assetfile_status_by_name","text":"<p>assetfile_status_by_name(asset_name : <code>String</code>)</p> <p>Requests information about a single asset file by its name.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the asset file. The promise will error if the request couldn't be fulfilled.</p> <p>See the example response from assetfile_get_list to get an idea of the response. The only difference is that this function returns a single <code>Dictionary</code> and <code>assetfile_get_list</code> returns an <code>Array</code> of <code>Dictionaries</code>.</p> Example <pre><code>GDOculusPlatform.assetfile_status_by_name(\"my_asset_file.po\")\\\n.then(func(asset_file : Dictionary):\n\n    download_file(asset_file.file_path)\n)\\\n.error(func(asset_file_err):\n    print(\"Unable to retrieve asset file: \", asset_file_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_download_by_id","title":"assetfile_download_by_id","text":"<p>assetfile_download_by_id(asset_id : <code>String</code>)</p> <p>Sends a request to download an asset file with the given ID. The download may take a few seconds to begin.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Example response:</p> <pre><code>{\n    \"id\": \"821548111514\",\n    \"file_path\": \"/sdcard/path/to/asset.pck\"\n}\n</code></pre> <p>Note</p> <p>The <code>file_path</code> in the dictionary does not indicate that the asset has finished downloading, it just indicates where the asset will be/is being downloaded.</p> <p>See the Signals section to know about useful signals to track the progress of the download.</p> Example <pre><code>GDOculusPlatform.assetfile_download_finished.connect(call_me_when_finished)\n\nGDOculusPlatform.assetfile_download_by_id(\"821548111514\")\\\n.then(func(download_info : Dictionary):\n\n    if download_info.file_path != \"\":\n        print(\"Downloading file on path: \", download_info.file_path)\n)\\\n.error(func(download_asset_err):\n    print(\"Unable to download asset file: \", download_asset_err)\n)\n\nfunc call_me_when_finished(asset_file_id : String):\n    print(\"Finished downloading file with ID: \", asset_file_id)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_download_by_name","title":"assetfile_download_by_name","text":"<p>assetfile_download_by_name(asset_name : <code>String</code>)</p> <p>Sends a request to download an asset file with the given name. The download may take a few seconds to begin.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Please look at the response from assetfile_download_by_id - both this function and <code>assetfile_download_by_id</code> return the same data and can be used interchangeably, apart from using an ID for the other function and a name for this one.</p> Example <pre><code>GDOculusPlatform.assetfile_download_by_name(\"my_asset_file.obb\")\\\n.then(func(download_info : Dictionary):\n\n    if download_info.file_path != \"\":\n        GDOP.call_on_finished_downloading(\"821548111514\", call_me_when_finished)\n)\\\n.error(func(download_asset_err):\n    print(\"Unable to download asset file: \", download_asset_err)\n)\n\nfunc call_me_when_finished(asset_file_id : String):\n    print(\"Finished downloading file with ID: \", asset_file_id)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_download_cancel_by_id","title":"assetfile_download_cancel_by_id","text":"<p>assetfile_download_cancel_by_id(asset_id : <code>String</code>)</p> <p>Sends a request to cancel a download of the asset file with the given ID.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Example response:</p> <pre><code>{\n    \"id\": \"244752684352\",\n    \"file_path\": \"/sdcard/path/to/asset.zip\",\n    \"success\": true\n}\n</code></pre> <p>Note</p> <p><code>success</code> will be <code>true</code> if the request was successful and <code>false</code> otherwise.</p> Example <pre><code>GDOculusPlatform.assetfile_download_cancel_by_id(\"244752684352\")\\\n.then(func(download_cancel_info : Dictionary):\n\n    if download_cancel_info.success:\n        print(\"Successfully cancelled the download!\")\n)\\\n.error(func(download_cancel_err):\n    print(\"Unable to cancel the download: \", download_cancel_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_download_cancel_by_name","title":"assetfile_download_cancel_by_name","text":"<p>assetfile_download_cancel_by_name(asset_name : <code>String</code>)</p> <p>Sends a request to cancel a download of the asset file with the given name.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Take a look at the example response from assetfile_download_cancel_by_id because both that function and this one return the same data.</p> Example <pre><code>GDOculusPlatform.assetfile_download_cancel_by_name(\"my_asset_name.zip\")\\\n.then(func(download_cancel_info : Dictionary):\n\n    if download_cancel_info.success:\n        print(\"Successfully cancelled the download!\")\n)\\\n.error(func(download_cancel_err):\n    print(\"Unable to cancel the download: \", download_cancel_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_delete_by_id","title":"assetfile_delete_by_id","text":"<p>assetfile_delete_by_id(asset_id : <code>String</code>)</p> <p>Sends a request to delete an asset file with the given ID.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Example response:</p> <pre><code>{\n    \"id\": \"774568224174\",\n    \"file_path\": \"/sdcard/path/to/asset.obb\",\n    \"success\": false\n}\n</code></pre> <p>Note</p> <p><code>success</code> will be <code>true</code> if the request was successful and <code>false</code> otherwise.</p> Example <pre><code>GDOculusPlatform.assetfile_delete_by_id(\"774568224174\")\\\n.then(func(delete_asset_info : Dictionary):\n\n    if delete_asset_info.success:\n        print(\"Successfully deleted the asset file!\")\n)\\\n.error(func(delete_asset_err):\n    print(\"Unable to delete the asset file: \", delete_asset_err)\n)\n</code></pre>"},{"location":"functions/asset-files/#assetfile_delete_by_name","title":"assetfile_delete_by_name","text":"<p>assetfile_delete_by_name(asset_name : <code>String</code>)</p> <p>Sends a request to delete an asset file with the given name.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the request. The promise will error if the request couldn't be fulfilled.</p> <p>Take a look at the example response from assetfile_delete_by_id because both that function and this one return the same data.</p> Example <pre><code>GDOculusPlatform.assetfile_delete_by_name(\"pack_of_gems.pck\")\\\n.then(func(delete_asset_info : Dictionary):\n\n    if delete_asset_info.success:\n        print(\"Successfully deleted the asset file!\")\n)\\\n.error(func(delete_asset_err):\n    print(\"Unable to delete the asset file: \", delete_asset_err)\n)\n</code></pre>"},{"location":"functions/attestation-api/","title":"Functions - Attestation API","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-attestation-api/</li> </ul>"},{"location":"functions/attestation-api/#functions","title":"Functions","text":""},{"location":"functions/attestation-api/#deviceappintegrity_get_integrity_token","title":"deviceappintegrity_get_integrity_token","text":"<p>deviceappintegrity_get_integrity_token(challenge_nonce : <code>String</code>)</p> <p>Requests the integrity (attestation) token to be used to verify the app integrity.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>String</code> with the attestation token. The promise will error if the request couldn't be completed.</p> Example <pre><code># We have a nonce from the Application Server\nvar nonce : String = \"R29kb3QgT2N1bHVzIFBsYXRmb3Jt\"\n\nGDOculusPlatform.deviceappintegrity_get_integrity_token(nonce)\\\n.then(func(attestation_token : String):\n    # Now we use this token to verify the app integrity\n    # You could use an HTTPRequest for example\n    print(\"Attestation token: \", attestation_token)\n)\\\n.error(func(attestation_token_err):\n    print(\"Unable to retrieve the attestation token: \", attestation_token_err)\n)\n</code></pre>"},{"location":"functions/challenges/","title":"Functions - Challenges","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-challenges/</li> </ul>"},{"location":"functions/challenges/#functions","title":"Functions","text":""},{"location":"functions/challenges/#challenges_get","title":"challenges_get","text":"<p>challenges_get(challenge_id : <code>String</code>)</p> <p>Returns information about a single challenge.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the challenge with the given <code>challenge_id</code> if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"id\": \"21541874514770\",\n    \"title\": \"My Challenge\",\n    \"description\": \"Collect the most coins in rush mode\",\n    \"start_date\": 1684639488,\n    \"end_date\": 1671659703,\n    \"visibility\": \"PUBLIC\",\n    \"type\": \"DEVELOPER_CREATED\",\n    \"leaderboard\": {\n        \"id\": \"4238760617434810\",\n        \"api_name\": \"MY_LEADERBOARD_0\",\n        \"destination\": {\n            \"display_name\": \"Rush Mountain\",\n            \"shareable_uri\": \"https://example.org/some_uri_to_share\",\n            \"api_name\": \"MY_DESTINATION_0\",\n            \"deeplink_message\": \"MY_DESTINATION_0_RUSH\"\n        }\n    },\n    \"invited_users\": {\n        \"data\": [],\n        \"next_page_url\": \"\"\n    },\n    \"participants\": {\n        \"data\": [\n            {\n                \"id\": \"2384626433832795\",\n                \"oculus_id\": \"some_id\",\n                \"display_name\": \"Steve\",\n                \"image_url\": \"https://example.org/some-image.png\",\n                \"small_image_url\": \"\",\n                \"presence\": {\n                    \"presence_status\": \"OFFLINE\",\n                    \"presence_deeplink_message\": \"\",\n                    \"presence_destination_api_name\": \"\",\n                    \"presence_lobby_session_id\": \"\",\n                    \"presence_match_session_id\": \"\",\n                }\n            }\n        ],\n        \"next_page_url\": \"\"\n    }\n}\n</code></pre></p> <p>Notes</p> <p>Take a look at the example response and the note from the user_get_blocked_users function to know more details about the <code>invited_users</code> and <code>participants</code> keys.</p> <p>The <code>visibility</code> field can be <code>PUBLIC</code>, <code>PRIVATE</code>, <code>INVITE_ONLY</code> or <code>UNKNOWN</code>.</p> <p>The <code>type</code> field can be <code>USER_CREATED</code>, <code>DEVELOPER_CREATED</code> or <code>UNKNOWN</code>.</p> <p>The <code>leaderboard</code> field can be an empty <code>Dictionary</code>.</p> <p>The <code>destination</code> field of <code>leaderboard</code> can be an empty <code>Dictionary</code>.</p> Example <pre><code>GDOculusPlatform.challenges_get(\"511854451440\")\\\n.then(func(challenge_resp : Dictionary):\n    print(\"Challenge information: \", challenge_resp)\n)\\\n.error(func(challenge_err):\n    print(\"Unable to retrieve challenge info: \", challenge_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenges_get_list","title":"challenges_get_list","text":"<p>challenges_get_list(limit : <code>int</code>, challenge_options : <code>Dictionary</code>)</p> <p>Requests a list of challenges. You can pass various filters to narrow down the response - see bellow. The <code>limit</code> is the maximum number of challenges that this function can return.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of challenges if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": \"21541874514770\",\n            \"title\": \"My Challenge\",\n            \"description\": \"Collect the most coins in rush mode\",\n            \"start_date\": 1684639488,\n            \"end_date\": 1671659703,\n            \"visibility\": \"PUBLIC\",\n            \"type\": \"DEVELOPER_CREATED\",\n            \"leaderboard\": {\n                \"id\": \"4238760617434810\",\n                \"api_name\": \"MY_LEADERBOARD_0\",\n                \"destination\": {\n                    \"display_name\": \"Rush Mountain\",\n                    \"shareable_uri\": \"https://example.org/some_uri_to_share\",\n                    \"api_name\": \"MY_DESTINATION_0\",\n                    \"deeplink_message\": \"MY_DESTINATION_0_RUSH\"\n                }\n            },\n            \"invited_users\": {\n                \"data\": [],\n                \"next_page_url\": \"\"\n            },\n            \"participants\": {\n                \"data\": [\n                    {\n                        \"id\": \"2384626433832795\",\n                        \"oculus_id\": \"some_id\",\n                        \"display_name\": \"Steve\",\n                        \"image_url\": \"https://example.org/some-image.png\",\n                        \"small_image_url\": \"\",\n                        \"presence\": {\n                            \"presence_status\": \"OFFLINE\",\n                            \"presence_deeplink_message\": \"\",\n                            \"presence_destination_api_name\": \"\",\n                            \"presence_lobby_session_id\": \"\",\n                            \"presence_match_session_id\": \"\",\n                        }\n                    }\n                ],\n                \"next_page_url\": \"\"\n            }\n        }\n    ],\n    \"previous_page_url\": \"\",\n    \"next_page_url\": \"\",\n    \"total_count\": 1\n}\n</code></pre> <p>More info about previous_page_url and next_page_url.</p> <p>The <code>total_count</code> key is not necessarily the total count of challenges in this block, but the total count of challenges that satisfy this query.</p> <p>Default values:</p> <p><code>limit</code> defaults to <code>10</code>.</p> <p>By default <code>challenge_options</code> is:</p> <pre><code>{\n    \"viewer_filter\": GDOculusPlatform.CHALLENGE_VISIBILITY_VIEWER_ALL_VISIBLE,\n    \"visibility\": GDOculusPlatform.CHALLENGE_VISIBILITY_PUBLIC,\n    \"include_active_challenges\": true,\n    \"include_future_challenges\": false,\n    \"include_past_challenges\": false\n}\n</code></pre> <p><code>challenge_options</code> can have the following optional keys/fields:</p> Key Type Example leaderboard_name String MY_AWESOME_LEADERBOARD_API_NAME title String Coin Challenge description String Collect as many coins as you can! start_date int 1784034738 end_date int 1791012840 viewer_filter ChallengeVisibilityViewerFilter GDOculusPlatform.CHALLENGE_VISIBILITY_VIEWER_ALL_VISIBLE visibility ChallengeVisibility GDOculusPlatform.CHALLENGE_VISIBILITY_PUBLIC include_active_challenges bool true include_future_challenges bool false include_past_challenges bool true <p>Enums:</p> <p>ChallengeVisibilityViewerFilter</p> Name Value Description CHALLENGE_VISIBILITY_VIEWER_ALL_VISIBLE 1 Will return all challenges visible to the user. CHALLENGE_VISIBILITY_VIEWER_PARTICIPATING 2 Will return only challenges where the viewer is participating. CHALLENGE_VISIBILITY_VIEWER_INVITED 3 Will return only challenges where the viewer is invited. CHALLENGE_VISIBILITY_VIEWER_PARTICIPATING_OR_INVITED 4 Will return only challenges where the viewer is participating or invited. <p>ChallengeVisibility</p> Name Value Description CHALLENGE_VISIBILITY_INVITE_ONLY 1 Will return all challenges that are invite only. CHALLENGE_VISIBILITY_PUBLIC 2 Will return all public challenges. CHALLENGE_VISIBILITY_PRIVATE 3 Will return all private challenges. Example <pre><code>var challenge_filters : Dictionary = {\n    \"start_date\": 1684034738,\n    \"include_active_challenges\": true,\n    \"include_future_challenges\": true,\n    \"include_past_challenges\": false\n}\n\nGDOculusPlatform.challenges_get_list(10, challenge_filters)\\\n.then(func(ch_array : Dictionary):\n\n    if not ch_array.previous_page_array.is_empty():\n        # Get previous page\n        pass\n    if not ch_array.next_page_array.is_empty():\n        # Get next page\n        pass\n\n    for challenge in ch_array.data:\n        print(\"Title: \", challenge.title)\n\n        if not challenge.leaderboard.is_empty():\n            print(\"Challenge leaderboard ID: \", challenge.leaderboard.id)\n\n)\\\n.error(func(leaderboard_entries_err):\n    print(\"Unable to retrieve challenges: \", leaderboard_entries_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenges_get_entries","title":"challenges_get_entries","text":"<p>challenges_get_entries(challenge_id : <code>String</code>, limit : <code>int</code>, filter : <code>LeaderboardFilterType</code>, start_at : <code>LeaderboardStartAt</code>)</p> <p>Requests the entries of the challenge with the given <code>challenge_id</code>. The <code>limit</code> argument defines the number of entries to return and must be more than 0. If you set the <code>filter</code> to <code>GDOculusPlatform.LEADERBOARD_FILTER_TYPE_FRIENDS</code> you can restrict the result to bidirectional followers, for example.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of entries from the challenge. The promise will error if the request couldn't be fulfilled.</p> <p>You can check the <code>enums</code> from leaderboard_get_entries to know what values you are allowed to use.</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": \"5118451178741\",\n            \"rank\": 10,\n            \"score\": 500,\n            \"timestamp\": 1684639488,\n            \"display_score\": \"500 pts\",\n            \"extra_data\": \"some custom data\",\n            \"user\": { \n                \"display_name\": \"Steve\",\n                \"id\": \"4238760617434810\",\n                \"oculus_id\": \"user_oculus_id\",\n                \"image_url\": \"https://example.org/user_image.png\",\n                \"small_image_url\": \"https://example.org/user_image_small.png\",\n                \"presence\": {\n                    \"presence_status\": \"OFFLINE\",\n                    \"presence_deeplink_message\": \"\",\n                    \"presence_destination_api_name\": \"\",\n                    \"presence_lobby_session_id\": \"\",\n                    \"presence_match_session_id\": \"\" \n                }\n            }\n        }\n    ],\n    \"previous_page_url\": \"\",\n    \"next_page_url\": \"\",\n    \"total_count\": 1,\n}\n</code></pre> <p>More info about previous_page_url and next_page_url.</p> <p>Note</p> <p>The <code>total_count</code> key is not the total count of elements in this page/block, but the total count of entries that satisfy the query/request. They can be the same if there are no more entries, but they don't have to.</p> <p>The <code>timestamp</code> key is a UNIX timestamp (in seconds).</p> Example <pre><code>var leaderboard_info : Dictionary = {\n    \"id\": \"185485748521\",\n    \"limit\": 50,\n    \"filter\": GDOculusPlatform.LEADERBOARD_FILTER_TYPE_NONE,\n    \"start_at\": GDOculusPlatform.LEADERBOARD_START_AT_CENTERED_ON_VIEWER\n}\n\nGDOculusPlatform.challenges_get_entries(\\\nleaderboard_info.id,\\\nleaderboard_info.limit,\\\nleaderboard_info.filter,\\\nleaderboard_info.start_at\\\n)\\\n.then(func(c_entries : Dictionary):\n    for entry in c_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Score: \", entry.score)\n        print(\"------------------\")\n\n)\\\n.error(func(challenge_entries_err):\n    print(\"Unable to retrieve challenge entries: \", challenge_entries_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenge_get_entries_after_rank","title":"challenge_get_entries_after_rank","text":"<p>challenge_get_entries_after_rank(challenge_id : <code>String</code>, limit : <code>int</code>, after_rank : <code>int</code>)</p> <p>Requests the entries of the challenge with the given <code>challenge_id</code> after a given <code>after_rank</code>, for example, 5 returns challenge results starting with the 6th user. The <code>limit</code> argument defines the number of entries to return and must be more than 0.</p> <p>The <code>after_rank</code> argument is exclusive, meaning that if for example you call this function with a <code>limit</code> of 3 and <code>after_rank</code> of 5, the response will include the 6th, 7th and 8th ranks/entries.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of entries from the challenge. The promise will error if the request couldn't be fulfilled.</p> <p>Note</p> <p>Take a look at the example response and the note from the challenges_get_entries function to know more details about the possible response from this function.</p> Example <pre><code>var challenge_info : Dictionary = {\n    \"id\": \"154874515188\",\n    \"limit\": 5,\n    \"after_rank\": 10\n}\n\nGDOculusPlatform.challenge_get_entries_after_rank(\\\nchallenge_info.id,\\\nchallenge_info.limit,\\\nchallenge_info.after_rank\\\n)\\\n.then(func(c_entries : Dictionary):\n\n    if not c_entries.previous_page_url.is_empty():\n        # Get previous page\n        pass\n    if not c_entries.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for entry in c_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Rank: \", entry.rank)\n        print(\"------------------\")\n\n)\\\n.error(func(challenge_entries_err):\n    print(\"Unable to retrieve challenge entries: \", challenge_entries_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenge_get_entries_by_ids","title":"challenge_get_entries_by_ids","text":"<p>challenge_get_entries_by_ids(challenge_id : <code>String</code>, limit : <code>int</code>, user_ids : <code>Array</code>, start_at : <code>LeaderboardStartAt</code>)</p> <p>Requests the entries of the challenge with the given <code>challenge_id</code> and only entries that match the given <code>user_ids</code>. The <code>limit</code> argument defines the number of entries to return and must be more than 0. If the <code>start_at</code> argument is <code>LEADERBOARD_START_AT_CENTERED_ON_VIEWER</code> or <code>LEADERBOARD_START_AT_CENTERED_ON_VIEWER_OR_TOP</code> the current user/player ID will be automatically added to the request.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of entries from the challenge. The promise will error if the request couldn't be fulfilled.</p> <p>Note</p> <p>Take a look at the example response and the note from the challenges_get_entries function to know more details about the possible response from this function.</p> Example <pre><code>var challenge_info : Dictionary = {\n    \"id\": \"51418484515504\",\n    \"limit\": 5,\n    \"user_ids\": [\n        \"2614448641204419\",\n        \"7822381524110013\"\n    ],\n    \"start_at\": GDOculusPlatform.LEADERBOARD_START_AT_CENTERED_ON_VIEWER\n}\n\nGDOculusPlatform.challenge_get_entries_by_ids(\\\nchallenge_info.id,\\\nchallenge_info.limit,\\\nchallenge_info.user_ids,\\\nchallenge_info.start_at\\\n)\\\n.then(func(c_entries : Dictionary):\n\n    for entry in c_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Rank: \", entry.rank)\n        print(\"Score: \", entry.display_score)\n        print(\"------------------\")\n)\\\n.error(func(challenge_entries_err):\n    print(\"Unable to retrieve challenge entries: \", challenge_entries_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenges_join","title":"challenges_join","text":"<p>challenges_join(challenge_id : <code>String</code>)</p> <p>Sends a request to join the current user to the challenge with the <code>challenge_id</code> if the user has permission.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the challenge with the given <code>challenge_id</code> if fulfilled. The promise will error if the request couldn't be completed.</p> <p>See the example response from challenges_get to know the format of the <code>Dictionary</code> that this function will return.</p> Example <pre><code>GDOculusPlatform.challenges_join(\"264822651547\")\\\n.then(func(challenge_info : Dictionary):\n    print(\"Challenge information: \", challenge_info)\n)\\\n.error(func(challenge_join_err):\n    print(\"Unable to join challenge: \", challenge_join_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenges_leave","title":"challenges_leave","text":"<p>challenges_leave(challenge_id : <code>String</code>)</p> <p>Sends a request to withdraw the current user to the challenge with the <code>challenge_id</code> if the user has permission.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the challenge with the given <code>challenge_id</code> if fulfilled. The promise will error if the request couldn't be completed.</p> <p>See the example response from challenges_get to know the format of the <code>Dictionary</code> that this function will return.</p> Example <pre><code>GDOculusPlatform.challenges_leave(\"264822651547\")\\\n.then(func(challenge_info : Dictionary):\n    print(\"Challenge information: \", challenge_info)\n)\\\n.error(func(challenge_leave_err):\n    print(\"Unable to leave challenge: \", challenge_leave_err)\n)\n</code></pre>"},{"location":"functions/challenges/#challenges_decline_invite","title":"challenges_decline_invite","text":"<p>challenges_decline_invite(challenge_id : <code>String</code>)</p> <p>Sends a request to decline an invite to join the challenge with the given <code>challenge_id</code>.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the challenge with the given <code>challenge_id</code> if fulfilled. The promise will error if the request couldn't be completed.</p> <p>See the example response from challenges_get to know the format of the <code>Dictionary</code> that this function will return.</p> Example <pre><code>GDOculusPlatform.challenges_decline_invite(\"264822651547\")\\\n.then(func(challenge_info : Dictionary):\n    print(\"Challenge information: \", challenge_info)\n)\\\n.error(func(challenge_decline_err):\n    print(\"Unable to decline challenge invite: \", challenge_decline_err)\n)\n</code></pre>"},{"location":"functions/group-presence/","title":"Functions - Group Presence","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-group-presence-overview/</li> <li>https://developer.oculus.com/documentation/native/ps-multiplayer-overview</li> </ul>"},{"location":"functions/group-presence/#functions","title":"Functions","text":""},{"location":"functions/group-presence/#grouppresence_clear","title":"grouppresence_clear","text":"<p>grouppresence_clear()</p> <p>Clears the group presence information for the current application/user.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_clear()\\\n.then(func(_resp : bool):\n    print(\"Successfully cleared the group presence information!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to clear group presence information: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_send_invites","title":"grouppresence_send_invites","text":"<p>grouppresence_send_invites(user_ids : <code>Array</code>)</p> <p>Sends an invite to the specified users to join the current user session. Note that you must have ser the group presence information before to be allowed to send invites.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> which will contain a list of the invites that were sent, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": \"818518747157704\",\n            \"lobby_session_id\": \"some_custom_id_1877\",\n            \"match_session_id\": \"some_custom_id_0544\",\n            \"is_active\": true,\n            \"recipient\": {\n                \"display_name\": \"username\",\n                \"id\": \"51054474470074144\",\n                \"oculus_id\": \"user_id\",\n                \"image_url\": \"https://example.org/some_url\",\n                \"small_image_url\": \"https://example.org/some_other_url\",\n                \"presence\": {\n                    \"presence_status\": \"OFFLINE\",\n                    \"presence_deeplink_message\": \"\",\n                    \"presence_destination_api_name\": \"\",\n                    \"presence_lobby_session_id\": \"\",\n                    \"presence_match_session_id\": \"\"\n                }\n            }, \n            \"destination\": {\n                \"display_name\": \"My Destination\",\n                \"shareable_uri\": \"https://example.org/some_uri_to_share\",\n                \"api_name\": \"MY_DESTINATION_0\",\n                \"deep_link_message\": \"MY_DESTINATION_0_DL\"\n            }\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> <p>Note</p> <p>The <code>recipient</code> and <code>destination</code> can be empty <code>Dictionaries</code> in some cases.</p> Example <pre><code>var user_ids : Array = [\"12184515760568\", \"92059382048201\"]\n\nGDOculusPlatform.grouppresence_send_invites(user_ids)\\\n.then(func(invites_array : Dictionary):\n\n    if not invites_array.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for invite in invites_array.data:\n        if invite.is_active:\n            print(\"Invite is active!\")\n)\\\n.error(func(invites_array_err):\n    print(\"Unable to send invites: \", invites_array_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set","title":"grouppresence_set","text":"<p>grouppresence_set(options : <code>Dictionary</code>)</p> <p>Sets the information of the group presence for the current application/user. A list of options that can be included is shown bellow.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Available options:</p> Key Type Example value deeplink_message_override String DEEPLINK_GO_TO_LOBBY destination_api_name String MY_AWESOME_DESTINATION lobby_session_id String some_lobby_id_147721 match_session_id String 41808448444_match is_joinable bool true Example <pre><code>var presence_opts : Dictionary = {\n    \"destination_api_name\": \"SNOWY_MOUNTAIN_0\",\n    \"lobby_session_id\": \"some_user_lobby_0417\",\n    \"match_session_id\": \"54087487487445\",\n    \"is_joinable\": true\n}\n\nGDOculusPlatform.grouppresence_set(presence_opts)\\\n.then(func(_resp : bool):\n    print(\"Group presence info set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set group presence information: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set_deeplink_message_override","title":"grouppresence_set_deeplink_message_override","text":"<p>grouppresence_set_deeplink_message_override(deeplink_message : <code>String</code>)</p> <p>Sets the user's deeplink message without changing the other group presence parameters. A destination must be set before using this function.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_set_deeplink_message_override(\"SOME_OVERRIDE_DL\")\\\n.then(func(_resp : bool):\n    print(\"Group presence deeplink message set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set deeplink message of group presence: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set_destination","title":"grouppresence_set_destination","text":"<p>grouppresence_set_destination(destination : <code>String</code>)</p> <p>Replaces the user's destination without chagind other group presence parameters.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_set_destination(\"MISTY_FOREST\")\\\n.then(func(_resp : bool):\n    print(\"Group presence destination set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set destination of group presence: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set_is_joinable","title":"grouppresence_set_is_joinable","text":"<p>grouppresence_set_destination(is_joinable : <code>bool</code>)</p> <p>Sets whether the current user's destination and session is joinable without changing other parameters. The destination or lobby/match session ID must be set before.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_set_is_joinable(false)\\\n.then(func(_resp : bool):\n    print(\"Group presence joinable state set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set joinable state of group presence: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set_lobby_session","title":"grouppresence_set_lobby_session","text":"<p>grouppresence_set_lobby_session(id : <code>String</code>)</p> <p>Replaces the user's lobby session ID without chagind other group presence parameters.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_set_lobby_session(\"354141101\")\\\n.then(func(_resp : bool):\n    print(\"Group presence lobby session set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set lobby session of group presence: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_set_match_session","title":"grouppresence_set_match_session","text":"<p>grouppresence_set_match_session(id : <code>String</code>)</p> <p>Replaces the user's match session ID without chagind other group presence parameters.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_set_match_session(\"my_match_651475\")\\\n.then(func(_resp : bool):\n    print(\"Group presence match session set!\")\n)\\\n.error(func(gp_err):\n    print(\"Unable to set match session of group presence: \", gp_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_get_invitable_users","title":"grouppresence_get_invitable_users","text":"<p>grouppresence_get_invitable_users(options : <code>Dictionary</code>)</p> <p>Requests a list of invitable users that can be invited to the current session. The list includes the user's bidirectional followers and other recently met users. The <code>options</code> argument is optional, and a list of allowed keys and examples is shown bellow.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>next_page_url</code>. The <code>data</code> key will contain a list of users, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Available options for <code>options</code>:</p> Key Type Example suggested_users Array of Strings [\"8110887962260\", \"2154895289701\"] <p>Each element of the <code>suggested_users</code> <code>Array</code> should be a user ID as a <code>String</code>. Adding users to <code>suggested_users</code> will add them to the invitable users list.</p> <p>Note</p> <p>Take a look at the example response and the note from the user_get_blocked_users function to know more details about the possible response from this function.</p> Example <pre><code>GDOculusPlatform.grouppresence_get_invitable_users()\\\n.then(func(users : Dictionary):\n\n    for user in users.data:\n        print(\"User: \", user.display_name)\n)\\\n.error(func(gp_invitable_users_err):\n    print(\"Unable to get a list of invitable users: \", gp_invitable_users_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_get_sent_invites","title":"grouppresence_get_sent_invites","text":"<p>grouppresence_get_sent_invites()</p> <p>Requests a list of invites sent by the current user.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> which will contain a list of the invites that have been sent by the user, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Note</p> <p>Take a look at the example response and the note from the grouppresence_send_invites function to know more details about the possible response from this function.</p> Example <pre><code>GDOculusPlatform.grouppresence_get_sent_invites()\\\n.then(func(invites_array : Dictionary):\n    if not invites_array.next_page_url.is_empty():\n        # Get next page\n         pass\n\n    for invite in invites_array.data:\n        if not invite.is_active:\n            print(\"Invite is inactive!\")\n)\\\n.error(func(invites_array_err):\n    print(\"Unable to get sent invites: \", invites_array_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_launch_invite_panel","title":"grouppresence_launch_invite_panel","text":"<p>grouppresence_launch_invite_panel(options : <code>Dictionary</code>)</p> <p>Launches the invite panel to invite other users to join the current session. The <code>options</code> argument is optional, and a list of allowed keys and examples is shown bellow.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> that indicates if the user did invite other users or not, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Available options for <code>options</code>:</p> Key Type Example suggested_users Array of Strings [\"8110887962260\", \"2154895289701\"] <p>Each element of the <code>suggested_users</code> <code>Array</code> should be a user ID as a <code>String</code>. Adding users to <code>suggested_users</code> will add them to the invitable users list.</p> Example <pre><code>var options : Dictionary = {\n    \"suggested_users\": [\"5015441880527\"]\n}\n\nGDOculusPlatform.grouppresence_launch_invite_panel(options)\\\n.then(func(did_send_invite : bool):\n    if did_send_invite:\n        print(\"Great! now wait for them to respond to your request.\")\n)\\\n.error(func(launch_invite_p_err):\n    print(\"Unable to launch invite panel: \", launch_invite_p_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_launch_multiplayer_error_dialog","title":"grouppresence_launch_multiplayer_error_dialog","text":"<p>grouppresence_launch_multiplayer_error_dialog(error_key : <code>MultiplayerErrorErrorKey</code>)</p> <p>Shows an error dialog with a predefined message.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Enums:</p> <p>MultiplayerErrorErrorKey:</p> Name Value Description MULTIPLAYER_ERR_KEY_DEST_UNAVAILABLE 1 Destination unavailable MULTIPLAYER_ERR_KEY_DLC_REQUIRED 2 A DLC is required MULTIPLAYER_ERR_KEY_GENERAL 3 Generic error message MULTIPLAYER_ERR_KEY_GROUP_FULL 4 The lobby/match is full MULTIPLAYER_ERR_KEY_INVITER_NOT_JOINABLE 5 The inviter cannot be joined MULTIPLAYER_ERR_KEY_LVL_NOT_HIGH_ENOUGH 6 User is not of high enough level MULTIPLAYER_ERR_KEY_LVL_NOT_UNLOCKED 7 The level has not been unlocked yet MULTIPLAYER_ERR_KEY_NETWORK_TIMEOUT 8 Network timed out MULTIPLAYER_ERR_KEY_NO_LONGER_AVAILABLE 9 The lobby/match/invite is not longer valid or available MULTIPLAYER_ERR_KEY_UPDATE_REQUIRED 10 An update is required MULTIPLAYER_ERR_KEY_TUTORIAL_REQUIRED 11 Completing the tutorial is required Example <pre><code>GDOculusPlatform.grouppresence_launch_multiplayer_error_dialog(GDOculusPlatform.MULTIPLAYER_ERR_KEY_GROUP_FULL)\\\n.then(func(_resp_ : bool):\n    print(\"User was informed that the group is already full.\")\n)\\\n.error(func(mp_error_err):\n    print(\"Unable to launch multiplayer error dialog: \", mp_error_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_launch_rejoin_dialog","title":"grouppresence_launch_rejoin_dialog","text":"<p>grouppresence_launch_rejoin_dialog(lobby_session_id : <code>String</code>, match_session_id : <code>String</code>, destination_api_name : <code>String</code>)</p> <p>Launches a rejoin dialog to allow the user to rejoin a previous session from a lobby/match ID. <code>lobby_session_id</code> and/or <code>match_session_id</code> must be set, but if you only use one and not the other, you can pass an empty <code>String</code> as the parameter.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will indicate if the user decided to rejoin or not, if fulfilled. The promise will error if the request couldn't be completed.</p> Example <pre><code>GDOculusPlatform.grouppresence_launch_rejoin_dialog(\"8458441_my_lobby\", \"\", \"DEST_QUIET_LAKE\")\\\n.then(func(did_rejoin : bool):\n    if did_rejoin:\n        print(\"User decided to rejoin, send them to the correct location!\")\n)\\\n.error(func(launch_rejoin_err):\n    print(\"Unable to launch rejoin panel: \", launch_rejoin_err)\n)\n</code></pre>"},{"location":"functions/group-presence/#grouppresence_launch_roster_panel","title":"grouppresence_launch_roster_panel","text":"<p>grouppresence_launch_roster_panel(options : <code>Dictionary</code>)</p> <p>Launches the roster panel which displays the current user in the roster and also users in the same session. The <code>options</code> argument is optional, and a list of allowed keys and examples is shown bellow.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> which will always be true, if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Available options for <code>options</code>:</p> Key Type Example suggested_users Array of Strings [\"8110887962260\", \"2154895289701\"] <p>Each element of the <code>suggested_users</code> <code>Array</code> should be a user ID as a <code>String</code>. Adding users to <code>suggested_users</code> will add them to the invitable users list (the user can invite other users from the roster panel as well).</p> Example <pre><code>GDOculusPlatform.grouppresence_launch_roster_panel()\\\n.then(func(_resp : bool):\n    print(\"Successfully opened roster panel.\")\n)\\\n.error(func(launch_roster_err):\n    print(\"Unable to launch roster panel: \", launch_roster_err)\n)\n</code></pre>"},{"location":"functions/in-app-purchases/","title":"Functions - In-App Purchases","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-iap/</li> </ul>"},{"location":"functions/in-app-purchases/#functions","title":"Functions","text":""},{"location":"functions/in-app-purchases/#iap_get_viewer_purchases","title":"iap_get_viewer_purchases","text":"<p>iap_get_viewer_purchases()</p> <p>Requests all of the logged-in user purchases.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> - the <code>data</code> key will contain information about each purchase (both consumable and durable). The promise will error if the request couldn't be fulfilled.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"sku\": \"durable_product_sku\",\n            \"reporting_id\": \"154128782811\",\n            \"purchase_str_id\": \"3325744768484514854951\",\n            \"grant_time\": 1683990516,\n            \"expiration_time\": 0,\n            \"developer_payload\": \"\"\n        },\n        {\n            \"sku\": \"consumable_product_sku\",\n            \"reporting_id\": \"184128782822\",\n            \"purchase_str_id\": \"8825744725484848476943\",\n            \"grant_time\": 1683990517,\n            \"expiration_time\": 1684004517,\n            \"developer_payload\": \"\"\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> Example <pre><code>GDOculusPlatform.iap_get_viewer_purchases()\\\n.then(func(user_purchases : Dictionary):\n    for purchase in user_purchases.data:\n        print(\"Purchased at: \", purchase.grant_time)\n)\\\n.error(func(user_purchases_err):\n    print(\"Unable to retrieve user purchases: \", user_purchases_err)\n)\n</code></pre>"},{"location":"functions/in-app-purchases/#iap_get_viewer_purchases_durable_cache","title":"iap_get_viewer_purchases_durable_cache","text":"<p>iap_get_viewer_purchases_durable_cache()</p> <p>Requests durable purchases of the logged-in user from the device cache. It is recommended to use iap_get_viewer_purchases first and only check the cache if that fails.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> - the <code>data</code> key will contain information about durable purchases from the device cache. The promise will error if the request couldn't be fulfilled.</p> <p>Example response: see the response from iap_get_viewer_purchases</p> Example <pre><code>GDOculusPlatform.iap_get_viewer_purchases_durable_cache()\\\n.then(func(user_durable_purchases : Dictionary):\n    for durable_purchase in user_durable_purchases.data:\n        print(\"Purchased at: \", durable_purchase.grant_time)\n)\\\n.error(func(user_durable_purchases_err):\n    print(\"Unable to retrieve user purchases from cache: \", user_durable_purchases_err)\n)\n</code></pre>"},{"location":"functions/in-app-purchases/#iap_get_products_by_sku","title":"iap_get_products_by_sku","text":"<p>iap_get_products_by_sku(sku_list : <code>Array</code>)</p> <p>Requests product information of a list of SKUs. The <code>sku_list</code> <code>Array</code> must only contain <code>String</code>s.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dicitonary</code> - the <code>data</code> key will contain information about each product requested. The promise will error if the request couldn't be fulfilled.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"sku\": \"gems_pack_10\",\n            \"name\": \"10 Gems\",\n            \"description\": \"This pack of shiny gems sure is worth!\",\n            \"formatted_price\": \"$9.99\"\n        },\n        {\n            \"sku\": \"gems_pack_50\",\n            \"name\": \"50 Gems\",\n            \"description\": \"This pack of shiny gems sure is even more worth!\",\n            \"formatted_price\": \"$39.99\"\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> Example <pre><code>var sku_list : Array = [\"gems_pack_10\", \"gems_pack_50\"]\n\nGDOculusPlatform.iap_get_products_by_sku(sku_list)\\\n.then(func(prods : Dictionary):\n    if not prods.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for product in prods.data:\n        print(\"Product info: \", product)\n)\\\n.error(func(products_err):\n    print(\"Unable to retrieve products from SKUs: \", products_err)\n)\n</code></pre>"},{"location":"functions/in-app-purchases/#iap_consume_purchase","title":"iap_consume_purchase","text":"<p>iap_consume_purchase(sku : <code>String</code>)</p> <p>Consumes a product with the given SKU.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain <code>true</code> as an argument if the request was successful. The promise will error if the product couldn't be consumed.</p> Example <pre><code>GDOculusPlatform.iap_consume_purchase(\"my_product_sku\")\\\n.then(func(consumed : bool):\n    print(\"Product consumed!\")\n)\\\n.error(func(consume_purchase_err):\n    print(\"Unable to consume purchase: \", consume_purchase_err)\n)\n</code></pre>"},{"location":"functions/in-app-purchases/#iap_launch_checkout_flow","title":"iap_launch_checkout_flow","text":"<p>iap_launch_checkout_flow(sku : <code>String</code>)</p> <p>Launches a checkout flow for the product with the given SKU. The user will be able to complete the purchase or cancel it.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with the product information if fulfilled. The promise will error if the user canceled the purchase or if the checkout flow couldn't be launched.</p> <p>Example response on purchase success: <pre><code>{\n    \"sku\": \"my_product_sku\",\n    \"reporting_id\": \"154128782811\",\n    \"purchase_str_id\": \"332574476951\",\n    \"grant_time\": 1683990516,\n    \"expiration_time\": 0,\n    \"developer_payload\": \"\"\n}\n</code></pre></p> <p>Example error on canceled: <pre><code>{\n    \"category\": \"user_canceled\",\n    \"code\": 0,\n    \"message\": \"The purchase has been canceled.\"\n}\n</code></pre></p> <p>Note</p> <p>Sometimes, after the user makes a purchase, the <code>iap_status</code> key from the assetfile_get_list will still show up as <code>not-entitled</code> for some time. You will be able to download assets associated with the product, but the <code>iap_status</code> may take some time to update.</p> Example <pre><code>GDOculusPlatform.iap_launch_checkout_flow(\"my_product_sku\")\\\n.then(func(product : Dictionary):\n\n    if product.purchase_str_id != \"\":\n        print(\"User completed the purchase!\")\n    else:\n        print(\"False alarm, the user didn't purchase the item.\")\n\n)\\\n.error(func(checkout_flow_err):\n    if typeof(checkout_flow_err) == TYPE_DICTIONARY\\\n    and checkout_flow_err.has(\"category\")\\\n    and checkout_flow_err.category == \"user_canceled\":\n        print(\"The user canceled the purchase!\")\n\n    else:\n        print(\"Unable to launch checkout flow: \", checkout_flow_err)\n)\n</code></pre>"},{"location":"functions/initialization/","title":"Functions - Initialization","text":""},{"location":"functions/initialization/#functions","title":"Functions","text":""},{"location":"functions/initialization/#is_platform_initialized","title":"is_platform_initialized","text":"<p>is_platform_initialized()</p> <p>Returns: A <code>bool</code> that is <code>true</code> if the platform is already initialized and <code>false</code> otherwise.</p> Example <pre><code>if not GDOculusPlatform.is_platform_initialized():\n    # Try to initialize the platform synchronously.\n    var platform_initialized : bool = GDOculusPlatform.initialize_android(\"31415926535\")\n\n    if not platform_initialized:\n        print(\"Unable to initialize Oculus Platform\")\n</code></pre>"},{"location":"functions/initialization/#initialize_android","title":"initialize_android","text":"<p>initialize_android(app_id : <code>String</code>, options : <code>Dictionary</code>)</p> <p>Requests the Oculus Platform initialization synchronously. Keep in mind that this function will block the main loop until this function returns.</p> <p>Returns: A <code>bool</code> that is <code>true</code> if the platform was initialized correctly or <code>false</code> otherwise.</p> <p>Options (optional):</p> Key Value type Description disable_p2p_networking bool Disables/enables the initialization of the WebRTC networking stack, only used for VoIP &amp; Networking (both deprecated). enable_cowatching bool Disables/enables the initialization of the cowatching stack. Example <pre><code>var platform_initialized : bool = GDOculusPlatform.initialize_android(\"31415926535\")\n\n# Other example:\nvar options : Dictionary = {\n    \"disable_p2p_networking\": true\n}\nvar platform_initialized : bool = GDOculusPlatform.initialize_android(\"31415926535\", options)\n</code></pre>"},{"location":"functions/initialization/#initialize_android_async","title":"initialize_android_async","text":"<p>initialize_android_async(app_id : <code>String</code>)</p> <p>Requests the Oculus Platform initialization asynchronously. This is the preferred way of initializing the platform.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a true <code>bool</code> as a response if fulfilled. An error message will be available if rejected/couldn't initialize.</p> Example <pre><code>GDOculusPlatform.initialize_android_async(\"31415926535\")\\\n.then(func(platform_initialized : bool):\n    print(\"Platform initialized!\")\n)\\\n.error(func(platform_initialized_err):\n    print(\"Platform NOT initialized. Error message: \", platform_initialized_err)\n)\n</code></pre>"},{"location":"functions/leaderboards/","title":"Functions - Leaderboards","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-leaderboards/</li> </ul>"},{"location":"functions/leaderboards/#functions","title":"Functions","text":""},{"location":"functions/leaderboards/#leaderboard_get","title":"leaderboard_get","text":"<p>leaderboard_get(leaderboard_name : <code>String</code>)</p> <p>Returns information about a single leaderboard with the given API name.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the leaderboard with the given API name if fulfilled. The promise will error if the request couldn't be completed.</p> <p>Example response: <pre><code>{\n    \"id\": \"6579389442106298\",\n    \"api_name\": \"MY_LEADERBOARD_0\"\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.leaderboard_get(\"MY_LEADERBOARD_0\")\\\n.then(func(leaderboard_resp : Dictionary):\n    print(\"Leaderboard information: \", leaderboard_resp)\n)\\\n.error(func(leaderboard_err):\n    print(\"Unable to retrieve leaderboard info: \", leaderboard_err)\n)\n</code></pre>"},{"location":"functions/leaderboards/#leaderboard_get_entries","title":"leaderboard_get_entries","text":"<p>leaderboard_get_entries(leaderboard_name : <code>String</code>, limit : <code>int</code>, filter : <code>LeaderboardFilterType</code>, start_at : <code>LeaderboardStartAt</code>)</p> <p>Requests the entries of the leaderboard with the given <code>leaderboard_name</code> (API name). The <code>limit</code> argument defines the number of entries to return and must be more than 0.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> - the <code>data</code> key will contain the information about a block of entries from the leaderboard. The promise will error if the request couldn't be fulfilled.</p> <p>Example response: <pre><code>{\n    \"data\": [\n        {\n            \"id\": \"36310577835242\",\n            \"rank\": 3,\n            \"score\": 500,\n            \"timestamp\": 1684639488,\n            \"display_score\": \"500 pts\",\n            \"extra_data\": \"\",\n            \"supplementary_metric\": {\n                \"id\": \"5614515145111\",\n                \"metric\": 16674\n            },\n            \"user\": { \n                \"display_name\": \"Steve\",\n                \"id\": \"4238760617434810\",\n                \"oculus_id\": \"user_oculus_id\",\n                \"image_url\": \"https://example.org/user_image.png\",\n                \"small_image_url\": \"https://example.org/user_image_small.png\",\n                \"presence\": {\n                    \"presence_status\": \"ONLINE\",\n                    \"presence_deeplink_message\": \"\",\n                    \"presence_destination_api_name\": \"\",\n                    \"presence_lobby_session_id\": \"\",\n                    \"presence_match_session_id\": \"\" \n                }\n            }\n        }\n    ],\n    \"previous_page_url\": \"\",\n    \"next_page_url\": \"\",\n    \"total_count\": 50\n}\n</code></pre></p> <p>More info about previous_page_url and next_page_url.</p> <p>Note</p> <p>The <code>total_count</code> key is the total count of leaderboard entries, not only the total count returned by this function.</p> <p>The <code>timestamp</code> key is a UNIX timestamp (in seconds).</p> <p>The <code>supplementary_metric</code> key can be an empty <code>Dictionary</code>.</p> <p>Enums:</p> <p>LeaderboardFilterType</p> Name Value Description LEADERBOARD_FILTER_TYPE_NONE 0 Will return all players in the leaderboard (within the other limits). LEADERBOARD_FILTER_TYPE_FRIENDS 1 Will return only players who are bidirectional friends of the current user/player. Each entry will still have their absolute rank. <p>LeaderboardStartAt</p> Name Value Description LEADERBOARD_START_AT_TOP 0 Default behavior. Will return results starting with the player that is ranked 1st on the leaderboard. LEADERBOARD_START_AT_CENTERED_ON_VIEWER 1 Will try to start from the user's rank on the leaderboard and center the leaderboard entries around that.  Example:  If the user is rank 10th and the request is to fetch 3 entries centered on the user, it'll return the entries ranked 9th, 10th, and 11th. If the user is not ranked on the requested leaderboard, this will return an error. LEADERBOARD_START_AT_CENTERED_ON_VIEWER_OR_TOP 2 Will try center on viewer, but if it can it will fallback to LEADERBOARD_START_AT_TOP Example <pre><code>var leaderboard_info : Dictionary = {\n    \"name\": \"MY_LEADERBOARD_0\",\n    \"limit\": 50,\n    \"filter\": GDOculusPlatform.LEADERBOARD_FILTER_TYPE_NONE,\n    \"start_at\": GDOculusPlatform.LEADERBOARD_START_AT_CENTERED_ON_VIEWER\n}\n\nGDOculusPlatform.leaderboard_get_entries(\\\nleaderboard_info.name,\\\nleaderboard_info.limit,\\\nleaderboard_info.filter,\\\nleaderboard_info.start_at\\\n)\\\n.then(func(l_entries : Dictionary):\n\n    if not l_entries.previous_page_url.is_empty():\n        # Get previous entries\n        pass\n    if not l_entries.next_page_url.is_empty():\n        # Get next entries\n        pass\n\n    for entry in l_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Rank: \", entry.rank)\n        print(\"------------------\")\n\n)\\\n.error(func(leaderboard_entries_err):\n    print(\"Unable to retrieve leaderboard entries: \", leaderboard_entries_err)\n)\n</code></pre>"},{"location":"functions/leaderboards/#leaderboard_get_entries_after_rank","title":"leaderboard_get_entries_after_rank","text":"<p>leaderboard_get_entries_after_rank(leaderboard_name : <code>String</code>, limit : <code>int</code>, after_rank : <code>int</code>)</p> <p>Requests the entries of the leaderboard with the given <code>leaderboard_name</code> (API name) after a given <code>after_rank</code>. The <code>limit</code> argument defines the number of entries to return and must be more than 0.</p> <p>The <code>after_rank</code> argument is exclusive, meaning that if for example you call this function with a <code>limit</code> of 3 and <code>after_rank</code> of 5, the response will include the 6th, 7th and 8th ranks/entries.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of entries from the leaderboard after a given rank. The promise will error if the request couldn't be fulfilled.</p> <p>Note</p> <p>Take a look at the example response and the note from the leaderboard_get_entries function to know more details about the possible response from this function.</p> Example <pre><code>var leaderboard_info : Dictionary = {\n    \"name\": \"MY_LEADERBOARD_0\",\n    \"limit\": 10,\n    \"after_rank\": 5\n}\n\nGDOculusPlatform.leaderboard_get_entries_after_rank(\\\nleaderboard_info.name,\\\nleaderboard_info.limit,\\\nleaderboard_info.after_rank\\\n)\\\n.then(func(l_entries : Dictionary):\n\n    if not l_entries.previous_page_url.is_empty():\n        # Get previous entries\n        pass\n    if not l_entries.next_page_url.is_empty():\n        # Get next entries\n        pass\n\n    for entry in l_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Rank: \", entry.rank)\n        print(\"------------------\")\n\n)\\\n.error(func(leaderboard_entries_err):\n    print(\"Unable to retrieve leaderboard entries: \", leaderboard_entries_err)\n)\n</code></pre>"},{"location":"functions/leaderboards/#leaderboard_get_entries_by_ids","title":"leaderboard_get_entries_by_ids","text":"<p>leaderboard_get_entries_by_ids(leaderboard_name : <code>String</code>, limit : <code>int</code>, user_ids : <code>Array</code>, start_at : <code>LeaderboardStartAt</code>)</p> <p>Requests the entries of the leaderboard with the given <code>leaderboard_name</code> (API name) and only entries that match the given <code>user_ids</code>. The <code>limit</code> argument defines the number of entries to return and must be more than 0. If the <code>start_at</code> argument is <code>LEADERBOARD_START_AT_CENTERED_ON_VIEWER</code> the current user/player ID will be automatically added to the request.</p> <p>As an example use case, you can use this function to get a list of users that are competing and compare their ranks.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about a block of entries from the leaderboard (only including the <code>user_ids</code> you defined). The promise will error if the request couldn't be fulfilled.</p> <p>Note</p> <p>Take a look at the example response and the note from the leaderboard_get_entries function to know more details about the possible response from this function.</p> Example <pre><code>var leaderboard_info : Dictionary = {\n    \"name\": \"MY_LEADERBOARD_0\",\n    \"limit\": 10,\n    \"user_ids\": [\n        \"4238760617434810\",\n        \"7438380617106547\"\n    ],\n    \"start_at\": GDOculusPlatform.LEADERBOARD_START_AT_TOP\n}\n\nGDOculusPlatform.leaderboard_get_entries_by_ids(\\\nleaderboard_info.name,\\\nleaderboard_info.limit,\\\nleaderboard_info.user_ids,\\\nleaderboard_info.start_at\\\n)\\\n.then(func(l_entries : Dictionary):\n\n    for entry in l_entries.data:\n        print(\"User: \", entry.user.oculus_id)\n        print(\"Rank: \", entry.rank)\n        print(\"Score: \", entry.display_score)\n        print(\"------------------\")\n)\\\n.error(func(leaderboard_entries_err):\n    print(\"Unable to retrieve leaderboard entries: \", leaderboard_entries_err)\n)\n</code></pre>"},{"location":"functions/leaderboards/#leaderboard_write_entry","title":"leaderboard_write_entry","text":"<p>leaderboard_write_entry(leaderboard_name : <code>String</code>, score : <code>int</code>, force_update : <code>bool</code>, extra : <code>Dictionary</code>)</p> <p>Sends a request to write a new entry to the leaderboard with the given <code>leaderboard_name</code> (API name). You can pass an empty <code>Dictionary</code> for <code>extra</code> if you don't want to include extra data. See bellow for optional values for the <code>extra</code> <code>Dictionary</code>.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the status of the request. The promise will error if the request couldn't be completed.</p> <p>Note: if <code>force_update</code> is true, then the new ranking will replace the previous ranking even if the new score is lower (assuming the leaderboard's sort order is higher is better).</p> <p>Extra values (optional):</p> Key Value type Description supplementary_metric int A supplementary metric used for tiebreaks. For example, if two users have a score of 10 but user1 has a <code>supplementary_metric</code> of 5 and user2 has a <code>supplementary_metric</code> of 8 (and the leaderboard's sort order is higher is better), then user2 will win. extra_data String A string of data to store along with the entry. You can use it to store details about the gameplay or any data that you want to associate with the entry. <p>Example response: <pre><code>{\n    \"did_update\": true,\n    \"challenge_ids\": []\n}\n</code></pre></p> Example <pre><code>var entry_info : Dictionary = {\n    \"name\": \"MY_LEADERBOARD_0\",\n    \"score\": 50,\n    \"force_update\": false,\n    \"extra\": {\n        \"supplementary_metric\": 10,\n        \"extra_data\": \"\"\n    }\n}\n\nGDOculusPlatform.leaderboard_write_entry(\\\nentry_info.name,\\\nentry_info.score,\\\nentry_info.force_update,\\\nentry_info.extra\\\n)\\\n.then(func(leaderboard_update_info : Dictionary):\n    print(\"Entry updated? \", leaderboard_update_info.did_update)\n)\\\n.error(func(leaderboard_update_err):\n    print(\"Unable to add entry: \", leaderboard_update_err)\n)\n</code></pre>"},{"location":"functions/media/","title":"Functions - Media","text":""},{"location":"functions/media/#functions","title":"Functions","text":""},{"location":"functions/media/#media_share_to_facebook","title":"media_share_to_facebook","text":"<p>media_share_to_facebook(post_text_suggestion : <code>String</code>, file_path : <code>String</code>, content_type : <code>MediaContentType</code>)</p> <p>Sends a request to initiate a flow to share media to Facebook. At the moment, only photos can be shared. The <code>post_text_suggestion</code> argument is a suggestion for the body of the post, <code>file_path</code> if an absolute path to an image and <code>content_type</code> is the type of content (photos only for now).</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with information about the status of the request. The promise will error if the request couldn't be completed.</p> <p>Enums:</p> <p>MediaContentType:</p> Name Value Description MEDIA_CONTENT_TYPE_PHOTO 1 The content/file is a photo. <p>Example response: <pre><code>{\n    \"share_media_status\": \"SHARED\",\n}\n</code></pre></p> <ul> <li><code>share_media_status</code> can be <code>UNKNOWN</code>, <code>SHARED</code> or <code>CANCELED</code>.</li> </ul> Example <pre><code>GDOculusPlatform.media_share_to_facebook(\\\n\"Check out this awesome location!\",\\\n\"/sdcard/some/path/to/an/image.png\",\\\nGDOculusPlatform.MEDIA_CONTENT_TYPE_PHOTO\\\n)\\\n.then(func(share_media_resp : Dictionary):\n    if share_media_resp.share_media_status != \"SHARED\":\n        print(\"Couldn't share media.\")\n    else:\n        print(\"Your friends will love that photo!\")\n)\\\n.error(func(share_media_err):\n    print(\"Unable to share media to Facebook: \", share_media_err)\n)\n</code></pre>"},{"location":"functions/user-age-category/","title":"Functions - User Age Category","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-age-group-apis/</li> </ul>"},{"location":"functions/user-age-category/#functions","title":"Functions","text":""},{"location":"functions/user-age-category/#useragecategory_get","title":"useragecategory_get","text":"<p>useragecategory_get()</p> <p>Retrieves the age group of the current user from Meta.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>AccountAgeCategory</code> that lets you know the age group of the current user. The promise will error if the request couldn't be completed.</p> <p>Enums:</p> <p>AccountAgeCategory:</p> Name Value Description ACCOUNTAGECATEGORY_UNKNOWN 0 Unknown age group. ACCOUNTAGECATEGORY_CHILD 1 For users between the ages of 10-12 ACCOUNTAGECATEGORY_TEEN 2 For users between the ages of 13-17 ACCOUNTAGECATEGORY_ADULT 3 For users between the ages 18 and up Example <pre><code>GDOculusPlatform.useragecategory_get()\\\n.then(func(user_age_category : GDOculusPlatform.AccountAgeCategory):\n    match user_age_category:\n        GDOculusPlatform.ACCOUNTAGECATEGORY_CHILD:\n            print(\"The user is a child!\")\n        GDOculusPlatform.ACCOUNTAGECATEGORY_TEEN:\n            print(\"The user is a teen!\")\n        GDOculusPlatform.ACCOUNTAGECATEGORY_ADULT:\n            print(\"The user is an adult!\")\n        _:\n            print(\"No idea about the age of the user!\")\n)\\\n.error(func(user_age_category_err):\n    print(\"Unable to retrieve the user age category: \", user_age_category_err)\n)\n</code></pre>"},{"location":"functions/user-age-category/#useragecategory_report","title":"useragecategory_report","text":"<p>useragecategory_report(app_age_category : <code>AppAgeCategory</code>)</p> <p>Used to report the app age cateogry to Meta.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>bool</code> (true) if the request was successful. The promise will error if the request couldn't be completed.</p> <p>Enums:</p> <p>AppAgeCategory:</p> Name Value Description APPAGECATEGORY_CHILD 1 The user's age is under 13 years. APPAGECATEGORY_NON_CHILD 2 The user's age is 13 years or older. Example <pre><code>GDOculusPlatform.useragecategory_report(GDOculusPlatform.APPAGECATEGORY_NON_CHILD)\\\n.then(func(report_resp : bool):\n    print(\"Successfully reported the app age category!\")\n)\\\n.error(func(report_err):\n    print(\"Unable to report the app's age category: \", report_err)\n)\n</code></pre>"},{"location":"functions/user/","title":"Functions - User","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-presence/</li> <li>https://developer.oculus.com/documentation/native/ps-entitlement-check/</li> <li>https://developer.oculus.com/documentation/native/ps-blockingsdk/</li> </ul>"},{"location":"functions/user/#functions","title":"Functions","text":""},{"location":"functions/user/#user_get_logged_in_user_id","title":"user_get_logged_in_user_id","text":"<p>user_get_logged_in_user_id()</p> <p>Requests the logged-in user ID.</p> <p>Returns: A <code>String</code> with the user ID. The <code>String</code> will be \"0\" if there's no ID.</p> Example <pre><code>var user_id : String = user_get_logged_in_user_id()\n# user_id = \"3141592653589793\" for example\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user_locale","title":"user_get_logged_in_user_locale","text":"<p>user_get_logged_in_user_locale()</p> <p>Requests the logged-in user's locale'.</p> <p>Returns: A <code>String</code> with the user's locale that SHOULD conform to BCP47: https://tools.ietf.org/html/bcp47 but in reality the API replaces \"-\" with \"_\"</p> Example <pre><code>var user_locale : String = user_get_logged_in_user_locale()\n# user_locale = \"en_US\" for example\n</code></pre>"},{"location":"functions/user/#user_get_is_viewer_entitled","title":"user_get_is_viewer_entitled","text":"<p>user_get_is_viewer_entitled()</p> <p>Checks if the user that launched the app is entitled to the application/game.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will be fulfilled if the user is entitled. The promise will error if the user is not entitled or if the check fails.</p> Example <pre><code>GDOculusPlatform.user_get_is_viewer_entitled()\\\n.then(func(_viewer_entitled_resp):\n    print(\"User is entitled!\")\n)\\\n.error(func(_viewer_entitled_err):\n    print(\"User is not entitled/error.\")\n)\n</code></pre>"},{"location":"functions/user/#user_get_user","title":"user_get_user","text":"<p>user_get_user(user_id : <code>String</code>)</p> <p>Requests information about a single user by ID.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> as a response if fulfilled. An error message will be available if rejected.</p> <p>Example response: <pre><code>{\n    \"id\": \"3141592653589793\",\n    \"oculus_id\": \"some_id\",\n    \"display_name\": \"steve\",\n    \"image_url\": \"https://example.org/some-image.png\",\n    \"small_image_url\": \"https://example.org/some-smaller-image.png\",\n    \"presence\": {\n        \"presence_status\": \"ONLINE\",\n        \"presence_deeplink_message\": \"\",\n        \"presence_destination_api_name\": \"\",\n        \"presence_lobby_session_id\": \"\",\n        \"presence_match_session_id\": \"\",\n    }\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_get_user(\"31415926535\")\\\n.then(func(get_user_resp : Dictionary):\n    print(\"User info: \", get_user_resp)\n)\\\n.error(func(get_user_err):\n    print(\"Unable to get user info: \", get_user_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user","title":"user_get_logged_in_user","text":"<p>user_get_logged_in_user()</p> <p>Requests information about the user that launched the app.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> as a response if fulfilled. An error message will be available if rejected.</p> <p>Example response: <pre><code>{\n    \"id\": \"2384626433832795\",\n    \"oculus_id\": \"some_other_id\",\n    \"display_name\": \"steven\",\n    \"image_url\": \"https://example.org/some-image.png\",\n    \"small_image_url\": \"\",\n    \"presence\": {\n        \"presence_status\": \"UNKNOWN\",\n        \"presence_deeplink_message\": \"\",\n        \"presence_destination_api_name\": \"\",\n        \"presence_lobby_session_id\": \"\",\n        \"presence_match_session_id\": \"\",\n    }\n}\n</code></pre></p> <p>Note</p> <p>Even though the <code>Dictionary</code> includes a <code>presence</code> key, it will not contain information other than \"UNKNOWN\" for the status. The current user should be 'online' for your application.</p> Example <pre><code>GDOculusPlatform.user_get_logged_in_user()\\\n.then(func(get_user_resp : Dictionary):\n    print(\"User info: \", get_user_resp)\n)\\\n.error(func(get_user_err):\n    print(\"Unable to get user info: \", get_user_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_user_proof","title":"user_get_user_proof","text":"<p>user_get_user_proof()</p> <p>Requests a nonce used to verify the current user. Check the official Oculus Platform documentation for more details.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will be fulfilled with the nonce as a <code>String</code> parameter. The function will error with a message if an error occured.</p> <p>Note</p> <p>A nonce is only valid once. After you use it to verify the user it becomes invalid.</p> Example <pre><code>GDOculusPlatform.user_get_user_proof()\\\n.then(func(user_proof_resp : String):\n    print(\"Nonce: \", user_proof_resp)\n)\\\n.error(func(user_proof_err):\n    print(\"Error getting user proof: \", user_proof_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_user_access_token","title":"user_get_user_access_token","text":"<p>user_get_user_access_token()</p> <p>Requests a token of the current user suitable to make REST calls against graph.oculus.com</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will be fulfilled with the access token as a <code>String</code> parameter. The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_user_access_token()\\\n.then(func(user_access_token : String):\n    print(\"Access token: \", user_access_token)\n)\\\n.error(func(user_access_token_err):\n    print(\"Error getting user proof: \", user_access_token_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_blocked_users","title":"user_get_blocked_users","text":"<p>user_get_blocked_users()</p> <p>Requests the user IDs of users blocked by the current user.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> with a <code>data</code> key that can contain an <code>Array</code> of user IDs as <code>String</code>s, if fulfilled. The function will error with a message if an error occured.</p> <p>Example response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": \"2384626433832795\",\n            \"oculus_id\": \"some_id\",\n            \"display_name\": \"Steve\",\n            \"image_url\": \"https://example.org/some-image.png\",\n            \"small_image_url\": \"\",\n            \"presence\": {\n                \"presence_status\": \"OFFLINE\",\n                \"presence_deeplink_message\": \"\",\n                \"presence_destination_api_name\": \"\",\n                \"presence_lobby_session_id\": \"\",\n                \"presence_match_session_id\": \"\",\n            }\n        }\n    ],\n    \"next_page_url\": \"\"\n}\n</code></pre> <p>More info about next_page_url.</p> Example <pre><code>GDOculusPlatform.user_get_blocked_users()\\\n.then(func(blocked_users : Dictionary):\n    if not blocked_users.next_page_url.is_empty():\n        # Get next page\n        pass\n\n    for user_id in blocked_users.data:\n        print(\"Blocked user ID: \", user_id)\n)\\\n.error(func(blocked_users_err):\n    print(\"Error getting blocked users: \", blocked_users_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user_friends","title":"user_get_logged_in_user_friends","text":"<p>user_get_logged_in_user_friends()</p> <p>Requests the user IDs of the current user's friends.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain a <code>Dictionary</code> with two keys: <code>data</code> and <code>next_page_url</code>, please see the example response from user_get_blocked_users as they return the same type of response (a list of users). The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_logged_in_user_friends()\\\n.then(func(friends_resp : Dictionary):\n\n    if not friends_resp.next_page_url.is_empty():\n        # Get next page of friends\n        pass\n\n    for friend_info in friends_resp.data:\n        print(\"Friend ID: \", friend_info.id)\n        print(\"Friend image: \", friend_info.image_url)\n\n)\\\n.error(func(friends_err):\n    print(\"Error getting friends: \", friends_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_org_scoped_id","title":"user_get_org_scoped_id","text":"<p>user_get_org_scoped_id(user_id : <code>String</code>)</p> <p>Requests an ID which is unique per org. Allows different apps within the same org to identify the user.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain the given user's scoped org ID as a <code>String</code>. The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_org_scoped_id(\"31415926535\")\\\n.then(func(org_scoped_id : String):\n    print(\"Org scoped ID: \", org_scoped_id)\n)\\\n.error(func(org_scoped_id_err):\n    print(\"Error getting org scoped ID: \", org_scoped_id_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_sdk_accounts","title":"user_get_sdk_accounts","text":"<p>user_get_sdk_accounts()</p> <p>Requests all the accounts belonging to the current user.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain an <code>Array</code> of <code>Dictionaries</code> with the type of account and its ID, if fulfilled. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>[\n    {\n        \"account_type\": \"OCULUS\",\n        \"account_id\": \"3141592653589793\"\n    }\n]\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_get_sdk_accounts()\\\n.then(func(sdk_accounts : Array):\n    for sdk_account in sdk_accounts:\n        print(\"Account type: \", sdk_account.account_type)\n        print(\"Account ID: \", sdk_account.account_id)\n)\\\n.error(func(sdk_accounts_err):\n    print(\"Error getting SDK accounts: \", sdk_accounts_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_block_flow","title":"user_launch_block_flow","text":"<p>user_launch_block_flow(user_id : <code>String</code>)</p> <p>Launches a block flow to block the user associated with the given <code>user_id</code>. The user/player can then decide to block or cancel the request.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n    \"did_block\": true,\n    \"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_block_flow(\"89793238462\")\\\n.then(func(block_flow_resp : Dictionary):\n    if block_flow_resp.did_block:\n        print(\"User blocked!\")\n    else:\n        print(\"Changed your mind?\")\n)\\\n.error(func(block_flow_err):\n    print(\"Error launching block flow: \", block_flow_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_unblock_flow","title":"user_launch_unblock_flow","text":"<p>user_launch_unblock_flow(user_id : <code>String</code>)</p> <p>Launches an unblock flow to unblock the user associated with the given <code>user_id</code>. The user/player can then decide to unblock or cancel the request.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n    \"did_unblock\": true,\n    \"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_unblock_flow(\"89793238462\")\\\n.then(func(unblock_flow_resp : Dictionary):\n    if unblock_flow_resp.did_unblock:\n        print(\"User unblocked!\")\n    else:\n        print(\"Better keep them blocked!\")\n)\\\n.error(func(unblock_flow_err):\n    print(\"Error launching unblock flow: \", unblock_flow_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_friend_request_flow","title":"user_launch_friend_request_flow","text":"<p>user_launch_friend_request_flow(user_id : <code>String</code>)</p> <p>Launches a friend request flow to add the user associated with the given <code>user_id</code> as a friend. The user/player can then decide to send the request or cancel it.</p> <p>Returns: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n    \"did_send_request\": true,\n    \"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_friend_request_flow(\"89793238462\")\\\n.then(func(friend_req_flow_resp : Dictionary):\n    if friend_req_flow_resp.did_send_request:\n        print(\"Friend request sent!\")\n    else:\n        print(\"Actually now that I think about it...\")\n)\\\n.error(func(friend_req_flow_err):\n    print(\"Error launching friend request flow: \", friend_req_flow_err)\n)\n</code></pre>"},{"location":"misc/about-previous_page_url-and-next_page_url/","title":"About previous_page_url and next_page_url","text":"<p>Certain methods return a <code>Dictionary</code> with: <code>previous_page_url</code> and/or <code>next_page_url</code>. Both of these keys can theoretically contain a URL where you could extract the previous (or next) set of records. However, I tested a few methods with up to 1000 records and didn't manage to get a <code>previous_page_url</code> or <code>next_page_url</code>, so I imagine this pagination concept was deprecated at some point, but there is no documentation about it, so I decided to include it in the response just in case.</p> <p>If you happen to get this URL, please report it on the issues page in GitHub, so we are aware that it can happen and update the docs.</p>"}]}